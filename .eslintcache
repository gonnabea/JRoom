[{"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\index.tsx":"1","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\reportWebVitals.ts":"2","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\GlobalStyles.ts":"3","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\App.tsx":"4","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\routes.tsx":"5","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Home.tsx":"6","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Exhibition.tsx":"7","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Interested.tsx":"8","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\SkewScrollMenu.tsx":"9","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeScene.tsx":"10","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\DirectionalLight.ts":"11","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Floor.ts":"12","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\LogoBox.ts":"13","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Window.ts":"14","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\FontLoader.ts":"15","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SunLight.ts":"16","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SpotLight.ts":"17","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\RoofWIndowHole.ts":"18","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\GLTFModelLoader.ts":"19","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\JFlixObjects.ts":"20","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\BackgroundBox.ts":"21","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Frame.ts":"22","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SelectBtn.ts":"23","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\CeilConnetor.ts":"24","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\MainHallObjects.ts":"25","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\JustReadItObjs.ts":"26","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\Header.tsx":"27","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\floor.ts":"28","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\DescriptionBoard.ts":"29","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\ONObjects.ts":"30","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\iframeObj.ts":"31"},{"size":567,"mtime":1610446256210,"results":"32","hashOfConfig":"33"},{"size":425,"mtime":1607822105962,"results":"34","hashOfConfig":"33"},{"size":259,"mtime":1610446268792,"results":"35","hashOfConfig":"33"},{"size":231,"mtime":1610446252706,"results":"36","hashOfConfig":"33"},{"size":562,"mtime":1610446261138,"results":"37","hashOfConfig":"33"},{"size":1167,"mtime":1615157629563,"results":"38","hashOfConfig":"33"},{"size":621,"mtime":1615324579181,"results":"39","hashOfConfig":"33"},{"size":1719,"mtime":1613649287644,"results":"40","hashOfConfig":"33"},{"size":4651,"mtime":1614966216175,"results":"41","hashOfConfig":"33"},{"size":21867,"mtime":1615331810884,"results":"42","hashOfConfig":"33"},{"size":1100,"mtime":1614083412506,"results":"43","hashOfConfig":"33"},{"size":1468,"mtime":1614952692041,"results":"44","hashOfConfig":"33"},{"size":682,"mtime":1615327288095,"results":"45","hashOfConfig":"33"},{"size":649,"mtime":1615329373579,"results":"46","hashOfConfig":"33"},{"size":1128,"mtime":1612195046515,"results":"47","hashOfConfig":"33"},{"size":2152,"mtime":1615323027192,"results":"48","hashOfConfig":"33"},{"size":758,"mtime":1611833519306,"results":"49","hashOfConfig":"33"},{"size":3597,"mtime":1615325476860,"results":"50","hashOfConfig":"33"},{"size":709,"mtime":1615225780974,"results":"51","hashOfConfig":"33"},{"size":7785,"mtime":1615313174077,"results":"52","hashOfConfig":"33"},{"size":1715,"mtime":1611937681903,"results":"53","hashOfConfig":"33"},{"size":2280,"mtime":1615330667875,"results":"54","hashOfConfig":"33"},{"size":4608,"mtime":1615230442828,"results":"55","hashOfConfig":"33"},{"size":1053,"mtime":1615322488399,"results":"56","hashOfConfig":"33"},{"size":2761,"mtime":1615149358830,"results":"57","hashOfConfig":"33"},{"size":3640,"mtime":1615313896733,"results":"58","hashOfConfig":"33"},{"size":663,"mtime":1613649316794,"results":"59","hashOfConfig":"33"},{"size":1452,"mtime":1615321372465,"results":"60","hashOfConfig":"33"},{"size":2415,"mtime":1615074490988,"results":"61","hashOfConfig":"33"},{"size":2867,"mtime":1615301257175,"results":"62","hashOfConfig":"33"},{"size":2278,"mtime":1615324886062,"results":"63","hashOfConfig":"33"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},"35bok3",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"85","usedDeprecatedRules":"66"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"92","usedDeprecatedRules":"66"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"66"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"66"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"66"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"66"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"114"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"66"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"120","usedDeprecatedRules":"66"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"66"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"66"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"66"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"66"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"66"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"141"},"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\index.tsx",[],["142","143"],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\reportWebVitals.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\GlobalStyles.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\App.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\routes.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Home.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Exhibition.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Interested.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\SkewScrollMenu.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeScene.tsx",["144","145","146","147","148","149","150","151","152","153","154"],"import React, { useEffect, useRef } from \"react\"\r\nimport * as THREE from \"three\"\r\nimport styled from \"styled-components\"\r\nimport { OrbitControls } from \"three-orbitcontrols-ts\"\r\nimport { DoubleSide, FrontSide } from \"three\"\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\r\nimport CSS3D from \"three-css3drenderer\"\r\n\r\n// 이미지 임포트\r\nimport { addWindow } from \"./ThreeModules/Window\"\r\nimport { addDirLight } from \"./ThreeModules/DirectionalLight\"\r\nimport { addSpotLight } from \"./ThreeModules/SpotLight\"\r\n\r\nimport { addRoofWindowHole } from \"./ThreeModules/RoofWIndowHole\"\r\nimport { addSunLight } from \"./ThreeModules/SunLight\"\r\nimport { JFlixObjects } from \"./ThreeModules/JFlixObjects\"\r\nimport { addBackgroundBox } from \"./ThreeModules/BackgroundBox\"\r\nimport { addFrame } from \"./ThreeModules/Frame\"\r\nimport { addSelectBtn } from \"./ThreeModules/SelectBtn\"\r\nimport { CSG } from \"three-csg-ts\"\r\nimport floorImage2 from \"../resources/images/floor2.jpg\"\r\nimport floorImage3 from \"../resources/images/floor3.jpg\"\r\nimport MainHallObjects from \"./ThreeModules/MainHallObjects\"\r\nimport { JustReadItObjs } from \"./ThreeModules/JustReadItObjs\"\r\nimport { addFloor } from \"./ThreeModules/floor\"\r\nimport onObjects from \"./ThreeModules/ONObjects\"\r\n\r\nconst Container = styled.section`\r\n  width: 100%;\r\n  height: 100%;\r\n  cursor: grab;\r\n  cursor: -moz-grab;\r\n  cursor: -webkit-grab;\r\n  :active {\r\n    cursor: grabbing;\r\n  }\r\n`\r\n\r\nexport let camera: THREE.PerspectiveCamera\r\nexport let scene: THREE.Scene\r\nexport let renderer: THREE.WebGLRenderer\r\nexport let controls: OrbitControls\r\nexport let composer: { addPass: (arg0: any) => void; render: (arg0: number) => void }\r\nexport let floorCamera: THREE.CubeCamera\r\nexport let floorMesh: THREE.Mesh\r\nlet cssRenderer: {\r\n  setSize: (arg0: number, arg1: number) => void\r\n  domElement: any\r\n  render: (arg0: THREE.Scene, arg1: THREE.PerspectiveCamera) => void\r\n}\r\nexport let cssScene: THREE.Scene\r\nexport let selectBtnObjs: any[] = []\r\nlet raycaster = new THREE.Raycaster()\r\nlet mouse = new THREE.Vector2()\r\nexport let embedWebsite: HTMLIFrameElement\r\nexport let websiteObject: THREE.Object3D\r\nlet frameCount = 0\r\nconst ThreeScene = () => {\r\n  const ThreeContainer = useRef<HTMLDivElement>(null)\r\n\r\n  // 작동이 안되어 고칠 필요가 있음\r\n  function resize() {\r\n    if (ThreeContainer.current) {\r\n      // cssRenderer.setSize(ThreeContainer.current?.clientWidth, ThreeContainer.current?.clientHeight)\r\n      // renderer.setSize(ThreeContainer.current?.clientWidth, ThreeContainer.current?.clientHeight)\r\n      // camera.aspect = ThreeContainer.current?.clientWidth / ThreeContainer.current?.clientHeight\r\n      // camera.updateProjectionMatrix()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    camera = new THREE.PerspectiveCamera(10, window.innerWidth / window.innerHeight, 1, 100000)\r\n    camera.position.set(-2773.8192101111504, 490.0248603839669, 9020.7527992239675)\r\n    camera.zoom = 0.3\r\n    camera.updateProjectionMatrix()\r\n    camera.updateMatrix()\r\n    scene = new THREE.Scene()\r\n    cssRenderer = new CSS3D.CSS3DRenderer()\r\n    cssScene = new THREE.Scene()\r\n    cssRenderer.setSize(window.innerWidth, window.innerHeight)\r\n    cssRenderer.domElement.style.top = 0\r\n    cssRenderer.domElement.style.position = \"absolute\"\r\n    cssRenderer.domElement.style.zIndex = \"5\"\r\n    ThreeContainer?.current?.appendChild(cssRenderer.domElement)\r\n\r\n    // 메인 홀\r\n    const buildingGeometry = new THREE.BoxGeometry(3000, 1000, 3000, 1, 1, 1)\r\n    const buildingBuffGeometry = new THREE.BufferGeometry().fromGeometry(buildingGeometry)\r\n    const buildingTexture = new THREE.TextureLoader()\r\n    const buildingMaterial = new THREE.MeshPhongMaterial({\r\n      color: 0x4e61ff,\r\n      specular: \"blue\",\r\n      flatShading: true,\r\n    })\r\n    const ExhibitionRoom = new THREE.Mesh(buildingBuffGeometry, buildingMaterial)\r\n    ExhibitionRoom.position.set(0, 0, -2510)\r\n\r\n    ExhibitionRoom.material.side = THREE.BackSide // mesh 내부에서만 면이 보이게 만들어 줌.\r\n\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.2) // soft white light\r\n\r\n    ambientLight.position.set(0, 0, 0)\r\n    scene.add(ambientLight)\r\n\r\n    //// 프로젝트 방 (J-Flix) ////\r\n\r\n    const project1Geo = new THREE.BoxGeometry(3000, 1000, 2000, 1, 1, 1)\r\n    const project1Mat = new THREE.MeshPhongMaterial({\r\n      color: 0x8af4eb,\r\n      specular: \"orange\",\r\n      flatShading: true,\r\n    })\r\n\r\n    ExhibitionRoom.updateMatrix()\r\n\r\n    project1Geo.merge(buildingGeometry, ExhibitionRoom.matrix)\r\n\r\n    const totalMesh = new THREE.Mesh(project1Geo, project1Mat)\r\n    totalMesh.material.side = THREE.BackSide\r\n    // netlify에서 geometry.faces 프로퍼티를 인식하지 못하여 조치\r\n    // 윗면 faces 지우기 <- 효율적인 방법 찾기\r\n    ;(totalMesh as any).geometry.faces.splice(4, 2)\r\n\r\n    // J-Flix 방문 구멍내기\r\n    const JFlixDoorHole = new THREE.Mesh(\r\n      new THREE.BoxBufferGeometry(380, 1500, 100, 1, 1, 1),\r\n      new THREE.MeshBasicMaterial()\r\n    )\r\n    JFlixDoorHole.position.set(1200, -500, -1000)\r\n\r\n    JFlixDoorHole.updateMatrix()\r\n    totalMesh.updateMatrix()\r\n    const bspJFlixDoorHole = CSG.fromMesh(JFlixDoorHole)\r\n    const bspJFlixRoom = CSG.fromMesh(totalMesh)\r\n\r\n    const bspJFlixResult = bspJFlixRoom.subtract(bspJFlixDoorHole)\r\n\r\n    const bspJFlixMeshResult = CSG.toMesh(bspJFlixResult, totalMesh.matrix)\r\n\r\n    bspJFlixMeshResult.material = totalMesh.material\r\n    bspJFlixMeshResult.updateMatrix()\r\n\r\n    // netlify에서 geometry.faces 프로퍼티를 인식하지 못하여 조치\r\n    // face 목록 중 가장 끝의 것들만 제거하면 패인 부분을 제거할 수 있음\r\n    ;(bspJFlixMeshResult as any).geometry.faces.splice(85, 20)\r\n\r\n    // 메인 홀 창문 구멍내기\r\n    const mainRoomHole = new THREE.Mesh(\r\n      new THREE.BoxBufferGeometry(500, 700, 100, 1, 1, 1),\r\n      new THREE.MeshBasicMaterial()\r\n    )\r\n    mainRoomHole.position.set(0, 100, -4000)\r\n\r\n    mainRoomHole.updateMatrix()\r\n    const bspMainRoomHole = CSG.fromMesh(mainRoomHole)\r\n    const bspMainRoom = CSG.fromMesh(bspJFlixMeshResult)\r\n\r\n    const bspMainRoomResult = bspMainRoom.subtract(bspMainRoomHole)\r\n    const bspMainRoomMesh = CSG.toMesh(bspMainRoomResult, bspJFlixMeshResult.matrix)\r\n\r\n    bspMainRoomMesh.material = bspJFlixMeshResult.material\r\n    bspMainRoomMesh.updateMatrix()\r\n\r\n    // netlify에서 geometry.faces 프로퍼티를 인식하지 못하여 조치\r\n    // face 목록 중 가장 끝의 것들만 제거하면 패인 부분을 제거할 수 있음\r\n    ;(bspMainRoomMesh as any).geometry.faces.splice(180, 20)\r\n    bspMainRoomMesh.castShadow = true\r\n    bspMainRoomMesh.receiveShadow = true\r\n    scene.add(bspMainRoomMesh)\r\n\r\n    //// 프로젝트 방 (Our-Now) ////\r\n\r\n    const project2Geo = new THREE.BoxGeometry(3000, 2000, 3000, 1, 1, 1)\r\n\r\n    const project2buffGeo = new THREE.BufferGeometry().fromGeometry(project2Geo)\r\n    const project2Mat = new THREE.MeshPhongMaterial({\r\n      color: 0x344aff,\r\n      specular: \"purple\",\r\n      flatShading: true,\r\n    })\r\n    const project2Mesh = new THREE.Mesh(project2buffGeo, project2Mat)\r\n\r\n    project2Mesh.position.set(3000, 500, -2490)\r\n    project2Mesh.material.side = THREE.DoubleSide\r\n\r\n    scene.add(project2Mesh)\r\n\r\n    //// 프로젝트 방 (Just-Read-It) ////\r\n\r\n    const project3Geo = new THREE.BoxGeometry(2900, 2000, 3000, 1, 1, 1)\r\n    const project3BuffGeo = new THREE.BufferGeometry().fromGeometry(project3Geo)\r\n    const project3Mat = new THREE.MeshPhongMaterial({\r\n      color: 0xff9500,\r\n      specular: \"orange\",\r\n      flatShading: true,\r\n    })\r\n    const project3Mesh = new THREE.Mesh(project3Geo, project3Mat)\r\n\r\n    project3Mesh.position.set(-2950, 500, -2490)\r\n    project3Mesh.material.side = THREE.DoubleSide\r\n    console.log(project3Mesh)\r\n    scene.add(project3Mesh)\r\n\r\n    // 디렉셔널 라이트 (햇빛)\r\n    addDirLight({ x: -1000, y: 2000, z: 2000 }, { x: -500, y: 1000, z: 800 })\r\n\r\n    addDirLight({ x: 0, y: 2000, z: -2000 }, { x: 0, y: 1000, z: 0 })\r\n\r\n    // 스포트라이트 (창문 통과하는 햇빛)\r\n    addSpotLight({ x: -900, y: 750, z: 800 }, { x: -400, y: -500, z: -100 }, Math.PI / 18)\r\n\r\n    // main area 지붕\r\n\r\n    const roofShape = new THREE.Shape()\r\n    roofShape.moveTo(-4500, 1500)\r\n    roofShape.lineTo(0, 3000) // rotate로 인해 x는 높이, y는 깊이\r\n    roofShape.lineTo(4500, 1500)\r\n    const extrudeSettings = {\r\n      steps: 2,\r\n      depth: 4000, // Z축: 깊이 (rotate로 인해 너비가 됨)\r\n      bevelEnabled: true,\r\n      bevelThickness: 1,\r\n      bevelSize: 1,\r\n      bevelOffset: 0,\r\n      bevelSegments: 1,\r\n      curveSegments: 1,\r\n    }\r\n\r\n    const roofGeometry = new THREE.ExtrudeGeometry(roofShape, extrudeSettings)\r\n    const roofMaterial = new THREE.MeshPhongMaterial({\r\n      color: 0x24292e,\r\n      specular: \"orange\",\r\n      flatShading: true,\r\n    })\r\n    roofMaterial.side = THREE.DoubleSide\r\n    const roofMesh = new THREE.Mesh(roofGeometry, roofMaterial)\r\n    roofMesh.position.set(0, 0, -4000)\r\n    scene.add(roofMesh)\r\n\r\n    // 바닥\r\n\r\n    addFloor({ width: 3000, height: 2000, x: 0, y: -490, z: 0, imageSrc: floorImage3 }) // J-Flix 바닥\r\n\r\n    addFloor({ width: 3000, height: 2900, x: 0, y: -490, z: -2500, imageSrc: floorImage2 }) // 메인 홀 바닥\r\n\r\n    addFloor({ width: 3000, height: 2900, x: 3000, y: -490, z: -2500, imageSrc: floorImage3 }) // Just-Read-It 바닥\r\n\r\n    addFloor({ width: 3000, height: 2900, x: -3000, y: -490, z: -2500, imageSrc: floorImage3 }) // Our-Now 바닥\r\n\r\n    ////\r\n\r\n    // GLTF 로더 //\r\n\r\n    // 창문 빛으로 밝히기\r\n    const windowLight = new THREE.RectAreaLight(0xffffff)\r\n    windowLight.position.set(-1000, 1300, 700)\r\n    windowLight.intensity = 200\r\n    windowLight.width = 500\r\n    windowLight.height = 500\r\n    windowLight.lookAt(-750, 975, 500)\r\n    scene.add(windowLight)\r\n\r\n    // 벽에 붙일 책 모형\r\n    const loader = new GLTFLoader()\r\n    loader.load(\"/models/book/scene.gltf\", (gltf) => {\r\n      gltf.scene.scale.set(1000, 1000, 1000)\r\n      gltf.scene.rotateX(Math.PI / 2)\r\n      gltf.scene.position.set(-300, 0, -900)\r\n      scene.add(gltf.scene)\r\n    })\r\n    const bookCoverMesh = new THREE.Mesh(\r\n      new THREE.PlaneBufferGeometry(720, 1000, 40),\r\n      new THREE.MeshPhongMaterial({ color: 0x292a2e, specular: \"orange\", flatShading: true })\r\n    )\r\n    bookCoverMesh.position.set(100, 0, -890)\r\n    bookCoverMesh.material.side = DoubleSide\r\n    scene.add(bookCoverMesh)\r\n\r\n    // 프로젝트별로 구분\r\n    JFlixObjects()\r\n    MainHallObjects()\r\n    JustReadItObjs()\r\n    onObjects()\r\n\r\n    // // 자동차 모델 로드\r\n\r\n    // loader.load(\"/models/free_porsche_911_carrera_4s/scene.gltf\", (gltf) => {\r\n    //   let wheel: THREE.Group\r\n    //   let rotateIndex = 0\r\n    //   loader.load(\"/models/sports_car_wheel/scene.gltf\", (wheelGltf) => {\r\n    //     wheelGltf.scene.scale.set(240, 240, 240)\r\n    //     wheelGltf.scene.position.set(-750, -300, 3390)\r\n\r\n    //     scene.add(wheelGltf.scene)\r\n    //     wheel = wheelGltf.scene\r\n    //   })\r\n    //   gltf.scene.scale.set(300, 300, 300)\r\n    //   gltf.scene.position.set(-500, -200, 3000)\r\n    //   scene.add(gltf.scene)\r\n\r\n    //   // 자동차 바퀴 제거: rotation 애니메이션 구현을 위해 다른 바퀴 로드 필요.\r\n    //   gltf.scene.children[0].children[0].children[0].children[7].visible = false\r\n    //   gltf.scene.children[0].children[0].children[0].children[20].visible = false\r\n\r\n    //   // 자동차 컨트롤\r\n    //   let keysPressed = { ArrowUp: false, ArrowDown: false, ArrowLeft: false, ArrowRight: false }\r\n\r\n    //   window.addEventListener(\"keydown\", (e) => {\r\n    //     if (e.key === \"ArrowUp\") {\r\n    //       keysPressed.ArrowUp = true\r\n    //     } else if (e.key === \"ArrowDown\") {\r\n    //       keysPressed.ArrowDown = true\r\n    //     } else if (e.key === \"ArrowLeft\") {\r\n    //       keysPressed.ArrowLeft = true\r\n    //     } else if (e.key === \"ArrowRight\") {\r\n    //       keysPressed.ArrowRight = true\r\n    //     }\r\n\r\n    //     if (keysPressed.ArrowUp) {\r\n    //       // 바퀴 돌리기\r\n    //       setInterval(() => {\r\n    //         rotateIndex += 2\r\n    //         wheel.rotation.x = rotateIndex\r\n    //       }, 10)\r\n    //       const forwardSoundUrl = \"/sounds/car-start.mp3\"\r\n    //       const soundEffect = document.createElement(\"audio\")\r\n    //       const audioSource = document.createElement(\"source\")\r\n    //       soundEffect.appendChild(audioSource)\r\n    //       soundEffect.currentTime = 1\r\n    //       audioSource.src = forwardSoundUrl\r\n    //       soundEffect.play()\r\n    //       setTimeout(() => soundEffect.pause(), 2000)\r\n    //       // 가속력을 고려한 자동차의 움직임 구현\r\n    //       gltf.scene.translateZ(60)\r\n\r\n    //       const moveFoward = setInterval(() => {\r\n    //         gltf.scene.translateZ(10)\r\n    //         wheel.position.z += 17\r\n    //       }, 100)\r\n    //       setTimeout(() => clearInterval(moveFoward), 1000)\r\n    //     } else if (keysPressed.ArrowDown) {\r\n    //       gltf.scene.translateZ(-60)\r\n    //       const moveBackward = setInterval(() => gltf.scene.translateZ(-10), 100)\r\n    //       setTimeout(() => clearInterval(moveBackward), 1000)\r\n    //     } else if (keysPressed.ArrowLeft) {\r\n    //       gltf.scene.rotateY(0.2)\r\n    //     } else if (keysPressed.ArrowRight) {\r\n    //       gltf.scene.rotateY(-0.2)\r\n    //     }\r\n    //     window.addEventListener(\"keyup\", (e) => {\r\n    //       if (e.key === \"ArrowUp\") {\r\n    //         keysPressed.ArrowUp = false\r\n    //       } else if (e.key === \"ArrowDown\") {\r\n    //         keysPressed.ArrowDown = false\r\n    //       } else if (e.key === \"ArrowLeft\") {\r\n    //         keysPressed.ArrowLeft = false\r\n    //       } else if (e.key === \"ArrowRight\") {\r\n    //         keysPressed.ArrowRight = false\r\n    //       }\r\n    //     })\r\n    //   })\r\n    // })\r\n    // const carLight = new THREE.PointLight(0xffffff, 10, 2000)\r\n    // carLight.position.set(0, -200, 3000)\r\n    // const lightIndicator = new THREE.PointLightHelper(carLight, 300)\r\n    // lightIndicator.color = 0x3f83f8\r\n\r\n    // const carLight2 = new THREE.PointLight(0x119be3, 10, 2000)\r\n    // carLight2.position.set(-1000, -200, 3000)\r\n    // const lightIndicator2 = new THREE.PointLightHelper(carLight2, 300)\r\n    // lightIndicator2.color = 0x3f83f8\r\n\r\n    // const carLight3 = new THREE.PointLight(0xffffff, 10, 3000)\r\n    // carLight3.position.set(-500, -200, 4000)\r\n    // const lightIndicator3 = new THREE.PointLightHelper(carLight3, 300)\r\n    // lightIndicator3.color = 0x3f83f8\r\n\r\n    // scene.add(carLight)\r\n    // scene.add(lightIndicator)\r\n    // scene.add(carLight2)\r\n    // scene.add(lightIndicator2)\r\n    // scene.add(carLight3)\r\n    // scene.add(lightIndicator3)\r\n\r\n    // 노을 배경 박스 생성\r\n    // addBackgroundBox()\r\n\r\n    // 레이캐스터 (클릭이벤트)\r\n    // 마우스 움직일 때마다 오브젝트 감지\r\n\r\n    const onMouseMove = (event: { clientX: number; clientY: number }) => {\r\n      // calculate mouse position in normalized device coordinates\r\n      // (-1 to +1) for both components\r\n\r\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1\r\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1\r\n\r\n      // update the picking ray with the camera and mouse position\r\n      raycaster.setFromCamera(mouse, camera)\r\n      // calculate objects intersecting the picking ray\r\n      const intersects = raycaster.intersectObjects(scene.children)\r\n\r\n      for (let i = 0; i < intersects.length; i++) {\r\n        // 임의로 지정해 줬던 object name으로 구별\r\n      }\r\n    }\r\n\r\n    // 렌더러\r\n    renderer = new THREE.WebGLRenderer({\r\n      antialias: false,\r\n      alpha: true,\r\n      preserveDrawingBuffer: true,\r\n    })\r\n\r\n    renderer.shadowMap.enabled = true\r\n\r\n    renderer.shadowMap.type = THREE.PCFSoftShadowMap\r\n\r\n    renderer.setPixelRatio(window.devicePixelRatio)\r\n    renderer.setSize(window.innerWidth, window.innerHeight)\r\n    renderer.setClearColor(0xffffff, 1)\r\n    renderer.domElement.style.position = \"absolute\"\r\n    renderer.domElement.style.top = \"0\"\r\n    renderer.domElement.style.zIndex = \"1\"\r\n\r\n    // Three.js에 html embed 시키기\r\n    // TV 모델에 올려진 plane mesh\r\n\r\n    // addIframeObj({\r\n    //   siteUrl: \"https://nomfilx-jiwon.netlify.app/#/\",\r\n    //   width: 1400,\r\n    //   height: 800,\r\n    //   position: { x: -1200, y: 10, z: 0 },\r\n    //   rotation: { x: 0, y: Math.PI / 2, z: 0 },\r\n    // })\r\n\r\n    const geometry = new THREE.PlaneBufferGeometry(1400, 800)\r\n\r\n    const material = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n      opacity: 0.0,\r\n      side: THREE.DoubleSide,\r\n    })\r\n    const planeMesh = new THREE.Mesh(geometry, material)\r\n    planeMesh.position.set(-1200, 10, 0)\r\n    planeMesh.rotation.set(0, Math.PI / 2, 0)\r\n    scene.add(planeMesh)\r\n\r\n    embedWebsite = document.createElement(\"iframe\")\r\n    embedWebsite.src = \"https://nomfilx-jiwon.netlify.app/#/\"\r\n    embedWebsite.width = \"1400px\"\r\n    embedWebsite.height = \"800px\"\r\n    embedWebsite.style.opacity = \"0\"\r\n    embedWebsite.onmouseover = () => {\r\n      embedWebsite.style.opacity = \"1\"\r\n      tvBackCover.style.opacity = \"1\"\r\n    }\r\n    embedWebsite.onmouseleave = () => {\r\n      embedWebsite.style.opacity = \"0\"\r\n      tvBackCover.style.opacity = \"0\"\r\n    }\r\n\r\n    websiteObject = new CSS3D.CSS3DObject(embedWebsite)\r\n    websiteObject.position.set(planeMesh.position.x, planeMesh.position.y, planeMesh.position.z)\r\n    websiteObject.rotation.set(0, Math.PI / 2, 0)\r\n    cssScene.add(websiteObject)\r\n\r\n    // TV 뒷면 가리기 위한 Div Box\r\n\r\n    const tvBackCover = document.createElement(\"div\")\r\n\r\n    tvBackCover.style.width = \"1400px\"\r\n    tvBackCover.style.height = \"800px\"\r\n    tvBackCover.style.backgroundColor = \"black\"\r\n    tvBackCover.style.color = \"white\"\r\n    tvBackCover.style.fontSize = \"80px\"\r\n    tvBackCover.style.opacity = \"0\"\r\n    const tvBackCoverObject = new CSS3D.CSS3DObject(tvBackCover)\r\n    tvBackCoverObject.position.set(\r\n      planeMesh.position.x - 3,\r\n      planeMesh.position.y,\r\n      planeMesh.position.z\r\n    )\r\n    tvBackCoverObject.rotation.set(0, Math.PI / 2, 0)\r\n    cssScene.add(tvBackCoverObject)\r\n\r\n    // 선택 버튼 생성\r\n\r\n    // 거실 (로비) 포커싱\r\n    addSelectBtn({\r\n      text: \"2\",\r\n      btnPosition: { x: 1200, y: 300, z: -1000 },\r\n      cameraPosition: { x: 0, y: 0, z: -3000.7527992239675 },\r\n      targetPosition: { x: 0, y: 0, z: -2000 },\r\n      zoomIndex: 0.2,\r\n    })\r\n\r\n    // 자동차 로드 포커싱\r\n    addSelectBtn({\r\n      text: \"3\",\r\n      btnPosition: { x: 0, y: 0, z: -3500 },\r\n      cameraPosition: { x: 0, y: 0, z: -4000.7527992239675 },\r\n      targetPosition: { x: 0, y: 0, z: -3000 },\r\n      zoomIndex: 0.2,\r\n    })\r\n    // 갓레이이펙트\r\n\r\n    composer = addSunLight({ x: -600, y: 200, z: 100 })\r\n    composer = addSunLight({ x: 200, y: 200, z: 100 })\r\n    composer = addSunLight({ x: 1000, y: 200, z: 100 })\r\n\r\n    controls = new OrbitControls(camera, cssRenderer.domElement)\r\n\r\n    // 마우스 휠로 줌 조절\r\n    // 확대\r\n    controls.dollyOut = function () {\r\n      if (camera.zoom < 5) {\r\n        camera.zoom = camera.zoom + 0.05\r\n        camera.updateProjectionMatrix()\r\n\r\n        // 카메라 줌에 따른 버튼 크기 조정\r\n        if (selectBtnObjs) {\r\n          selectBtnObjs.map((selectBtnObj) => {\r\n            if (selectBtnObj.scale.x > 1) {\r\n              selectBtnObj.scale.set(\r\n                selectBtnObj.scale.x - 0.3,\r\n                selectBtnObj.scale.y - 0.3,\r\n                selectBtnObj.scale.z - 0.3\r\n              )\r\n            }\r\n          })\r\n        }\r\n      }\r\n    }\r\n    // 축소\r\n    controls.dollyIn = function () {\r\n      if (camera.zoom > 0.2) {\r\n        camera.zoom = camera.zoom - 0.05\r\n        console.log(camera.zoom)\r\n        // 카메라 줌에 따른 버튼 크기 조정\r\n        if (selectBtnObjs) {\r\n          selectBtnObjs.map((selectBtnObj) => {\r\n            if (camera.zoom < 0.5) {\r\n              selectBtnObj.scale.set(\r\n                selectBtnObj.scale.x + 0.3,\r\n                selectBtnObj.scale.y + 0.3,\r\n                selectBtnObj.scale.z + 0.3\r\n              )\r\n            }\r\n          })\r\n        }\r\n\r\n        camera.updateProjectionMatrix()\r\n      }\r\n    }\r\n\r\n    // 카메라 회전시 버튼이 정면에서 보이도록.\r\n    window.addEventListener(\"mousedown\", () => {\r\n      if (selectBtnObjs) {\r\n        selectBtnObjs.map((selectBtnObj) => {\r\n          selectBtnObj.rotation.set(camera.rotation.x, camera.rotation.y, camera.rotation.z)\r\n        })\r\n      }\r\n    })\r\n\r\n    window.addEventListener(\"mouseup\", () => {\r\n      if (selectBtnObjs) {\r\n        selectBtnObjs.map((selectBtnObj) => {\r\n          selectBtnObj.rotation.set(camera.rotation.x, camera.rotation.y, camera.rotation.z)\r\n        })\r\n      }\r\n    })\r\n\r\n    window.addEventListener(\"mousemove\", onMouseMove)\r\n\r\n    if (ThreeContainer.current !== null) {\r\n      ThreeContainer.current?.appendChild(renderer.domElement)\r\n      // renderer.setAnimationLoop( animate ); <- GPU 메모리 100% 버그 유발\r\n      animate()\r\n    }\r\n\r\n    setInterval(() => {\r\n      console.log(`${frameCount} fps`)\r\n      frameCount = 0\r\n    }, 1000)\r\n\r\n    function animate() {\r\n      frameCount += 1\r\n\r\n      cssRenderer.render(cssScene, camera)\r\n      composer.render(1)\r\n      // floorCamera.update(renderer, scene) <- GPU 점유율 대폭 상승 유발\r\n\r\n      requestAnimationFrame(animate)\r\n    }\r\n\r\n    window.addEventListener(\"resize\", resize)\r\n\r\n    return () => {\r\n      animate()\r\n      scene.remove.apply(scene, scene.children)\r\n    }\r\n  }, [])\r\n  return <Container id=\"container\" ref={ThreeContainer}></Container>\r\n}\r\n\r\nexport default ThreeScene\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\DirectionalLight.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Floor.ts",["155","156"],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\LogoBox.ts",["157"],"import * as THREE from \"three\"\r\nimport { FlatShading } from \"three\"\r\nimport { scene } from \"../ThreeScene\"\r\n\r\nexport const addLogoBox = (position: { x: number; y: number; z: number }, image: string) => {\r\n  const logoBoxGeo = new THREE.BoxBufferGeometry(300, 300, 100, 1, 1, 1)\r\n  const logoBoxTexture = new THREE.TextureLoader().load(image)\r\n  const logoBoxMat = new THREE.MeshPhongMaterial({\r\n    map: logoBoxTexture,\r\n    specular: \"orange\",\r\n    flatShading: true,\r\n  })\r\n  const logoBox = new THREE.Mesh(logoBoxGeo, logoBoxMat)\r\n  logoBox.receiveShadow = true\r\n  logoBox.castShadow = true\r\n\r\n  logoBox.position.set(position.x, position.y, position.z)\r\n  scene.add(logoBox)\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Window.ts",["158"],"import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\r\nimport { scene } from \"../ThreeScene\"\r\nimport * as THREE from \"three\"\r\n\r\nconst loader = new GLTFLoader()\r\n\r\nexport const addWindow = (\r\n  position: { x: number; y: number; z: number },\r\n  scale: { x: number; y: number; z: number },\r\n  rotation: { x: any; y: any; z: any }\r\n) => {\r\n  loader.load(\"/models/window1/window.gltf\", (gltf) => {\r\n    console.log(gltf)\r\n    gltf.scene.position.set(position.x, position.y, position.z)\r\n    gltf.scene.rotation.set(rotation.x, rotation.y, rotation.z)\r\n    gltf.scene.scale.set(scale.x, scale.y, scale.z)\r\n    scene.add(gltf.scene)\r\n  })\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\FontLoader.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SunLight.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SpotLight.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\RoofWIndowHole.ts",["159"],"import * as THREE from \"three\"\r\nimport { CSG } from \"three-csg-ts\"\r\nimport { scene } from \"../ThreeScene\"\r\n\r\nexport const addRoofWindowHole = (\r\n  roofMesh: THREE.Mesh<THREE.ExtrudeGeometry, THREE.MeshPhongMaterial>\r\n) => {\r\n  const roofWindowHole = new THREE.Mesh(\r\n    new THREE.BoxBufferGeometry(600, 500, 600, 1, 1, 1),\r\n    new THREE.MeshPhongMaterial()\r\n  )\r\n  const roofWindowHole2 = new THREE.Mesh(\r\n    new THREE.BoxBufferGeometry(600, 500, 600, 1, 1, 1),\r\n    new THREE.MeshPhongMaterial()\r\n  )\r\n  const roofWindowHole3 = new THREE.Mesh(\r\n    new THREE.BoxBufferGeometry(600, 500, 600, 1, 1, 1),\r\n    new THREE.MeshPhongMaterial()\r\n  )\r\n  const roofWindowHole4 = new THREE.Mesh(\r\n    new THREE.BoxBufferGeometry(600, 500, 700, 1, 1, 1),\r\n    new THREE.MeshPhongMaterial()\r\n  )\r\n  const JFlixDoorHole = new THREE.Mesh(\r\n    new THREE.BoxBufferGeometry(600, 500, 700, 1, 1, 1),\r\n    new THREE.MeshPhongMaterial()\r\n  )\r\n\r\n  roofWindowHole.rotateZ(-Math.PI / 4)\r\n  roofWindowHole2.rotateZ(-Math.PI / 4)\r\n  roofWindowHole3.rotateZ(-Math.PI / 4)\r\n  roofWindowHole4.rotateZ(Math.PI / 4)\r\n\r\n  roofWindowHole.position.set(500, 1500, 750)\r\n  roofWindowHole2.position.set(500, 1500, 1500)\r\n  roofWindowHole3.position.set(500, 1500, 2250)\r\n  roofWindowHole4.position.set(500, 700, 1500)\r\n\r\n  roofMesh.updateMatrix()\r\n  roofWindowHole.updateMatrix()\r\n  roofWindowHole2.updateMatrix()\r\n  roofWindowHole3.updateMatrix()\r\n  roofWindowHole4.updateMatrix()\r\n\r\n  // 첫번째 창문 구멍 생성\r\n  const bspWindowHole = CSG.fromMesh(roofWindowHole)\r\n  const bspRoof = CSG.fromMesh(roofMesh)\r\n\r\n  const bspResult = bspRoof.subtract(bspWindowHole)\r\n\r\n  const bspMeshResult = CSG.toMesh(bspResult, roofMesh.matrix)\r\n\r\n  bspMeshResult.material = roofMesh.material\r\n  // netlify에서 geometry.faces 프로퍼티를 인식하지 못하여 조치\r\n  // face 목록 중 가장 끝의 것들만 제거하면 패인 부분을 제거할 수 있음\r\n  ;(bspMeshResult as any).geometry.faces.splice(97, 40)\r\n\r\n  // 두번째 창문 구멍 생성\r\n\r\n  const bspWindowHole2 = CSG.fromMesh(roofWindowHole2)\r\n  const bspRoof2 = CSG.fromMesh(bspMeshResult)\r\n\r\n  const bspResult2 = bspRoof2.subtract(bspWindowHole2)\r\n  const bspMeshResult2 = CSG.toMesh(bspResult2, bspMeshResult.matrix)\r\n  bspMeshResult2.material = roofMesh.material\r\n  // netlify에서 geometry.faces 프로퍼티를 인식하지 못하여 조치\r\n  ;(bspMeshResult2 as any).geometry.faces.splice(97, 16)\r\n\r\n  // 세번쨰 창문 구멍 생성\r\n\r\n  const bspWindowHole3 = CSG.fromMesh(roofWindowHole3)\r\n  const bspRoof3 = CSG.fromMesh(bspMeshResult2)\r\n\r\n  const bspResult3 = bspRoof3.subtract(bspWindowHole3)\r\n  const bspMeshResult3 = CSG.toMesh(bspResult3, bspMeshResult.matrix)\r\n  bspMeshResult3.material = roofMesh.material\r\n  // netlify에서 geometry.faces 프로퍼티를 인식하지 못하여 조치\r\n  ;(bspMeshResult3 as any).geometry.faces.splice(97, 18)\r\n\r\n  bspMeshResult3.rotateZ(Math.PI / 2)\r\n  bspMeshResult3.rotateX(Math.PI / 2)\r\n  bspMeshResult3.position.set(-1500, 510, -1000)\r\n  bspMeshResult3.material.side = THREE.DoubleSide\r\n\r\n  scene.add(bspMeshResult3)\r\n\r\n  // 네번째 창문 구멍 생성\r\n  // const bspWindowHole4 = CSG.fromMesh(roofWindowHole4)\r\n  // const bspRoof4 = CSG.fromMesh(bspMeshResult3)\r\n\r\n  // const bspResult4 = bspRoof4.subtract(bspWindowHole4)\r\n  // const bspMeshResult4 = CSG.toMesh(bspResult4, bspMeshResult.matrix)\r\n  // bspMeshResult4.material = roofMesh.material\r\n\r\n  // console.log(bspMeshResult4.geometry.faces)\r\n  // bspMeshResult4.geometry.faces.splice(190, 15)\r\n\r\n  // scene.add(bspMeshResult4)\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\GLTFModelLoader.ts",["160"],"import * as THREE from \"three\"\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\r\nimport { scene } from \"../ThreeScene\"\r\n\r\nconst loader = new GLTFLoader()\r\n\r\nexport const GLTFModelLoader = (props: {\r\n  modelUrl: string\r\n  scale: { x: number; y: number; z: number }\r\n  position: { x: number; y: number; z: number }\r\n  rotation: { x: number; y: number; z: number }\r\n}) => {\r\n  loader.load(props.modelUrl, (gltf) => {\r\n    gltf.scene.scale.set(props.scale.x, props.scale.y, props.scale.z)\r\n    gltf.scene.position.set(props.position.x, props.position.y, props.position.z)\r\n    gltf.scene.rotation.set(props.rotation.x, props.rotation.y, props.rotation.z)\r\n\r\n    scene.add(gltf.scene)\r\n  })\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\JFlixObjects.ts",["161","162","163","164","165"],"import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\r\nimport { scene } from \"../ThreeScene\"\r\nimport { FontLoder } from \"./FontLoader\"\r\nimport { addLogoBox } from \"./LogoBox\"\r\n\r\nimport reactLogo from \"../../resources/images/reactLogo.jpg\"\r\nimport styledComponentsLogo from \"../../resources/images/styledComponents.jpg\"\r\nimport netlifyLogo from \"../../resources/images/netlify.jpg\"\r\nimport jsLogo from \"../../resources/images/vanillajs.png\"\r\nimport sunsetImg1 from \"../resources/images/Sunset Backgrounds/sunset12.jpg\"\r\nimport { addCeilConnector } from \"./CeilConnetor\"\r\nimport { addFrame } from \"./Frame\"\r\nimport * as THREE from \"three\"\r\nimport CSS3D from \"three-css3drenderer\"\r\nimport { cssScene } from \"../ThreeScene\"\r\nimport addDescriptionBoard from \"./DescriptionBoard\"\r\nimport { addRoofWindowHole } from \"./RoofWIndowHole\"\r\nimport { addWindow } from \"./Window\"\r\nimport { addSelectBtn } from \"./SelectBtn\"\r\n\r\nexport const JFlixObjects = () => {\r\n  // J-Flix 지붕\r\n  const roofShape = new THREE.Shape()\r\n  roofShape.moveTo(0, 0)\r\n  roofShape.lineTo(1000, 0) // rotate로 인해 x는 높이, y는 깊이\r\n  roofShape.lineTo(1000, 1000)\r\n  roofShape.lineTo(0, 2000)\r\n\r\n  const extrudeSettings = {\r\n    steps: 2,\r\n    depth: 3000, // Z축: 깊이 (rotate로 인해 너비가 됨)\r\n    bevelEnabled: true,\r\n    bevelThickness: 1,\r\n    bevelSize: 1,\r\n    bevelOffset: 0,\r\n    bevelSegments: 1,\r\n  }\r\n\r\n  const roofGeometry = new THREE.ExtrudeGeometry(roofShape, extrudeSettings)\r\n  const roofMaterial = new THREE.MeshPhongMaterial({\r\n    color: 0x24292e,\r\n    specular: \"orange\",\r\n    flatShading: true,\r\n  })\r\n  roofMaterial.side = THREE.DoubleSide\r\n  const roofMesh = new THREE.Mesh(roofGeometry, roofMaterial)\r\n\r\n  // roofGeometry.faces.splice(20, 4) // 지붕의 밑면 제거\r\n\r\n  // 창문 구멍 뚫기\r\n\r\n  addRoofWindowHole(roofMesh)\r\n\r\n  // 지붕에 달린 창문 (앞면 3개)\r\n\r\n  addWindow(\r\n    { x: -750, y: 975, z: 500 },\r\n    { x: 400, y: 315, z: 300 },\r\n    { x: -Math.PI / 4, y: -Math.PI, z: 0 }\r\n  ) // Arguments: {position, scale, rotation}\r\n  addWindow(\r\n    { x: 0, y: 975, z: 500 },\r\n    { x: 400, y: 315, z: 300 },\r\n    { x: -Math.PI / 4, y: -Math.PI, z: 0 }\r\n  )\r\n  addWindow(\r\n    { x: 750, y: 975, z: 500 },\r\n    { x: 400, y: 315, z: 300 },\r\n    { x: -Math.PI / 4, y: -Math.PI, z: 0 }\r\n  )\r\n\r\n  // 지붕에 달린 창문 (뒷면 1개)\r\n\r\n  // addWindow(\r\n  //   { x: 0, y: 1050, z: -400 },\r\n  //   { x: 500, y: 350, z: 300 },\r\n  //   { x: Math.PI / 4, y: -Math.PI, z: 0 }\r\n  // )\r\n\r\n  // 책 모형에 붙일 텍스트 geometry\r\n  FontLoder(\r\n    {\r\n      fontModelUrl: \"/fonts/helvetiker_regular.typeface.json\",\r\n      text: \"J-Flix\",\r\n      size: 80,\r\n      height: 50,\r\n      color: 0x02f6d5,\r\n      bevelSize: 7,\r\n    },\r\n    { x: 100, y: 200, z: -900 }\r\n  )\r\n  // 프로젝트 제목\r\n\r\n  // 제작자 이름\r\n  FontLoder(\r\n    {\r\n      fontModelUrl: \"/fonts/helvetiker_regular.typeface.json\",\r\n      text: \"Made By.Jiwon\",\r\n      size: 35,\r\n      height: 50,\r\n      color: 0xffffff,\r\n      bevelSize: 3,\r\n    },\r\n    { x: 100, y: 100, z: -900 }\r\n  )\r\n\r\n  FontLoder(\r\n    {\r\n      fontModelUrl: \"/fonts/D2D.json\",\r\n      text:\r\n        \"HTML,CSS,순수_JavaScript로_만든\\n\\n미니_프로젝트들과_\\n\\n_리액트를_사용하여_만든_\\n\\nnomflix_클론입니다\",\r\n      size: 20,\r\n      height: 10,\r\n      color: 0xffffff,\r\n      bevelSize: 1,\r\n    },\r\n    { x: -200, y: 0, z: -900 }\r\n  )\r\n\r\n  // 기술스택 박스 만들기\r\n\r\n  addLogoBox({ x: -500, y: 200, z: -940 }, reactLogo)\r\n  addLogoBox({ x: -500, y: -200, z: -940 }, styledComponentsLogo)\r\n  addLogoBox({ x: 700, y: 100, z: -940 }, netlifyLogo)\r\n  addLogoBox({ x: 700, y: -300, z: -940 }, jsLogo)\r\n\r\n  const loader = new GLTFLoader()\r\n\r\n  // TV GLTF 모델 로드\r\n  loader.load(\"/models/2018_flat_screen_tv/scene.gltf\", (gltf) => {\r\n    gltf.scene.scale.set(750, 750, 2000)\r\n    gltf.scene.position.set(-1200, 0, 0)\r\n    gltf.scene.traverse(function (child) {\r\n      if ((<THREE.Mesh>child).isMesh) {\r\n        child.castShadow = true\r\n        child.receiveShadow = true\r\n      }\r\n    })\r\n    gltf.scene.rotateY(Math.PI / 2)\r\n    scene.add(gltf.scene)\r\n  })\r\n\r\n  // 소파 모델 로드\r\n\r\n  loader.load(\"/models/sofa-edit/scene.gltf\", (gltf) => {\r\n    gltf.scene.scale.set(220, 220, 220)\r\n    gltf.scene.position.set(0, -500, 100)\r\n    gltf.scene.rotateY(Math.PI)\r\n    gltf.scene.traverse(function (child) {\r\n      if ((<THREE.Mesh>child).isMesh) {\r\n        child.castShadow = true\r\n        child.receiveShadow = true\r\n      }\r\n    })\r\n    scene.add(gltf.scene)\r\n  })\r\n\r\n  // 팝콘 모델 로드\r\n\r\n  loader.load(\"/models/popcorn_bucket/scene.gltf\", (gltf) => {\r\n    gltf.scene.scale.set(100, 100, 100)\r\n    gltf.scene.position.set(-1000, -500, 850)\r\n\r\n    gltf.scene.rotateY(Math.PI)\r\n    scene.add(gltf.scene)\r\n  })\r\n\r\n  // 방문 모델 로드\r\n\r\n  loader.load(\"/models/door/scene.gltf\", (gltf) => {\r\n    gltf.scene.scale.set(600, 300, 300)\r\n    gltf.scene.position.set(1200, -500, -1030)\r\n    gltf.scene.rotateY(Math.PI / 2)\r\n\r\n    scene.add(gltf.scene)\r\n  })\r\n\r\n  // 액자 모델 추가, 노마드 로고 그림 배치\r\n  addFrame()\r\n\r\n  // 천장과 벽지 이음새 생성\r\n  addCeilConnector({ x: 2, y: 3, z: 9.9 }, 200, { x: 1480, y: 490, z: -1000 }, \"black\", {\r\n    x: 0,\r\n    y: 0,\r\n    z: Math.PI / 2,\r\n  })\r\n\r\n  addCeilConnector({ x: 2, y: 3, z: 9.9 }, 200, { x: -1460, y: 490, z: -1000 }, \"black\", {\r\n    x: 0,\r\n    y: 0,\r\n    z: Math.PI,\r\n  })\r\n\r\n  addCeilConnector({ x: 2, y: 3, z: 9.9 }, 300, { x: -1460, y: 480, z: -970 }, \"black\", {\r\n    x: 0,\r\n    y: Math.PI / 2,\r\n    z: Math.PI / 2,\r\n  })\r\n  addCeilConnector({ x: 2, y: 3, z: 9.9 }, 300, { x: -1460, y: 485, z: 970 }, \"black\", {\r\n    x: 0,\r\n    y: Math.PI / 2,\r\n    z: -Math.PI / 2,\r\n  })\r\n\r\n  // 바닥 이음새\r\n  addCeilConnector({ x: 2, y: 3, z: 9.9 }, 200, { x: 1480, y: -490, z: -1000 }, \"grey\", {\r\n    x: 0,\r\n    y: 0,\r\n    z: Math.PI / 2,\r\n  })\r\n\r\n  addCeilConnector({ x: 2, y: 3, z: 9.9 }, 200, { x: -1460, y: -490, z: -1000 }, \"grey\", {\r\n    x: 0,\r\n    y: 0,\r\n    z: Math.PI,\r\n  })\r\n\r\n  addCeilConnector({ x: 2, y: 3, z: 9.9 }, 300, { x: -1460, y: -480, z: -970 }, \"grey\", {\r\n    x: 0,\r\n    y: Math.PI / 2,\r\n    z: Math.PI / 2,\r\n  })\r\n\r\n  addCeilConnector({ x: 2, y: 3, z: 9.9 }, 300, { x: -1460, y: -485, z: 970 }, \"grey\", {\r\n    x: 0,\r\n    y: Math.PI / 2,\r\n    z: -Math.PI / 2,\r\n  })\r\n\r\n  // 선택 버튼 생성\r\n\r\n  // J-Flix 방 포커싱\r\n  addSelectBtn({\r\n    text: \"0\",\r\n    btnPosition: { x: 0, y: 300, z: -800 },\r\n    cameraPosition: { x: -2773.8192101111504, y: 490.0248603839669, z: 4120.7527992239675 },\r\n    targetPosition: { x: 0, y: 0, z: 0 },\r\n    zoomIndex: 0.3,\r\n  })\r\n\r\n  // tv 포커싱\r\n  addSelectBtn({\r\n    text: \"1\",\r\n    btnPosition: { x: -1300, y: 600, z: 500 },\r\n    cameraPosition: { x: 1000, y: 300, z: 0 },\r\n    targetPosition: { x: 600, y: 250, z: 0 },\r\n    zoomIndex: 0.2,\r\n  })\r\n\r\n  // 채널 변경 버튼 & tv 포커싱\r\n  addSelectBtn({\r\n    text: \"✨\",\r\n    btnPosition: { x: -1300, y: 600, z: 300 },\r\n    cameraPosition: { x: 1000, y: 300, z: 0 },\r\n    targetPosition: { x: 900, y: 300, z: 0 },\r\n    zoomIndex: 0.2,\r\n  })\r\n\r\n  // 프로젝트 설명 DOM 오브젝트\r\n  addDescriptionBoard({\r\n    width: \"600px\",\r\n    height: \"400px\",\r\n    description:\r\n      \"영화 소개 사이트 입니다. 리액트 내에서 ajax를 사용해 만들었으며, json 데이터의 동적 처리, SPA, 컴포넌트 활용 등 순수 JavaScript와 비교해서 어떤 점이 리액트가 우수한 지 알 수 있었던 프로젝트였습니다.\",\r\n    title: \"J-Flix\",\r\n    titleColor: \"#10EEC6\",\r\n    siteUrl: \"https://nomfilx-jiwon.netlify.app/#/\",\r\n    position: { x: -1200, y: 610, z: -400 },\r\n    rotation: { x: 0, y: Math.PI / 2, z: 0 },\r\n  })\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\BackgroundBox.ts",["166","167"],"import groundImg from \"../../resources/images/ground.jpg\"\r\nimport { scene } from \"../ThreeScene\"\r\nimport * as THREE from \"three\"\r\n\r\n// 노을 배경 박스 생성\r\n\r\nexport const addBackgroundBox = () => {\r\n  const materialArray = []\r\n  const texture_ft = new THREE.TextureLoader().load(\r\n    \"https://media-exp1.licdn.com/dms/image/C511BAQE0NnIkjkotGA/company-background_10000/0/1541489744017?e=2159024400&v=beta&t=8CzJngJh5TrtF6_WFRYSlDeycAkT52hAfb4qLYGYnv8\"\r\n  )\r\n  const texture_bk = new THREE.TextureLoader().load(\r\n    \"https://media-exp1.licdn.com/dms/image/C511BAQE0NnIkjkotGA/company-background_10000/0/1541489744017?e=2159024400&v=beta&t=8CzJngJh5TrtF6_WFRYSlDeycAkT52hAfb4qLYGYnv8\"\r\n  )\r\n  const texture_up = new THREE.TextureLoader().load(\r\n    \"https://media-exp1.licdn.com/dms/image/C511BAQE0NnIkjkotGA/company-background_10000/0/1541489744017?e=2159024400&v=beta&t=8CzJngJh5TrtF6_WFRYSlDeycAkT52hAfb4qLYGYnv8\"\r\n  )\r\n  const texture_dn = new THREE.TextureLoader().load(groundImg)\r\n\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }))\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }))\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }))\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_dn })) // 땅 텍스쳐\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }))\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }))\r\n\r\n  const skyboxGeo = new THREE.BoxGeometry(9000, 19000, 19000)\r\n  const skybox = new THREE.Mesh(skyboxGeo, materialArray)\r\n  skybox.position.set(0, 8990, 0)\r\n  materialArray.map((mat) => {\r\n    mat.side = THREE.BackSide\r\n    return null\r\n  })\r\n  scene.add(skybox)\r\n}\r\n",["168","169"],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Frame.ts",["170","171"],"import * as THREE from \"three\"\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\r\nimport { camera, scene } from \"../ThreeScene\"\r\nimport nomadLogo from \"../../resources/images/nomadLogo.png\"\r\nimport { PointLightHelper } from \"three\"\r\n\r\n// 액자 모델\r\nconst loader = new GLTFLoader()\r\n\r\nexport let frameGroupMesh: THREE.Object3D\r\nexport const addFrame = () => {\r\n  loader.load(\"/models/3d_architecture__photo_frame/scene.gltf\", (gltf) => {\r\n    frameGroupMesh = gltf.scene\r\n    frameGroupMesh.scale.set(10, 10, 10)\r\n    frameGroupMesh.position.set(1480, 0, 0)\r\n    frameGroupMesh.rotateY(Math.PI)\r\n\r\n    scene.add(frameGroupMesh)\r\n\r\n    // 카메라 시점이 액자 뒤로 갔을 때 사라지게 하는 알고리즘\r\n    window.addEventListener(\"mouseup\", () => {\r\n      console.log(camera.position)\r\n      console.log(camera.rotation)\r\n      const meshsOfFrame =\r\n        frameGroupMesh.children[0].children[0].children[0].children[0].children[0].children[0]\r\n          .children\r\n\r\n      meshsOfFrame.map((object) => {\r\n        if (camera.rotation.z > 0.2) {\r\n          object.visible = false\r\n        } else {\r\n          object.visible = true\r\n        }\r\n      })\r\n    })\r\n\r\n    // 액자에 들어갈 그림\r\n\r\n    const sizeCheckBox = new THREE.Box3().setFromObject(gltf.scene) // 액자 크기 측정을 위한 가상 박스\r\n    console.log(sizeCheckBox)\r\n    const frameWidth = sizeCheckBox.max.z - sizeCheckBox.min.z - 100\r\n    const frameHeight = sizeCheckBox.max.y - sizeCheckBox.min.y - 100\r\n    const frameDepth = sizeCheckBox.max.x - sizeCheckBox.min.x\r\n\r\n    const imageInFrameGeo = new THREE.PlaneBufferGeometry(frameWidth, frameHeight, frameDepth)\r\n    const imageInFrameTexture = new THREE.TextureLoader().load(nomadLogo)\r\n    const imageInFrameMat = new THREE.MeshPhongMaterial({ map: imageInFrameTexture })\r\n    const imageInFrame = new THREE.Mesh(imageInFrameGeo, imageInFrameMat)\r\n    imageInFrame.rotateY(-Math.PI / 2)\r\n    imageInFrame.position.set(1460, 0, 0)\r\n\r\n    const pointLight = new THREE.PointLight(0xffffff, 5, 500)\r\n    pointLight.position.set(1420, 0, 0)\r\n    const lightHelper = new THREE.PointLightHelper(pointLight, 0xffff00)\r\n    scene.add(imageInFrame)\r\n    scene.add(pointLight)\r\n    scene.add(lightHelper)\r\n  })\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SelectBtn.ts",["172","173","174","175","176","177"],"import * as THREE from \"three\"\r\nimport { FlatShading } from \"three\"\r\nimport {\r\n  camera,\r\n  scene,\r\n  selectBtnObjs,\r\n  cssScene,\r\n  embedWebsite,\r\n  controls,\r\n  websiteObject,\r\n} from \"../ThreeScene\"\r\nimport CSS3D from \"three-css3drenderer\"\r\nimport { frameGroupMesh } from \"./Frame\"\r\n\r\n// 선택 버튼 생성\r\nexport const addSelectBtn = (props: {\r\n  text: string\r\n  btnPosition: { x: number; y: number; z: number }\r\n  cameraPosition: { x: number; y: number; z: number }\r\n  targetPosition?: { x: number; y: number; z: number }\r\n  zoomIndex: number\r\n}) => {\r\n  function chooseProject() {\r\n    // 순차적으로 프로젝트 변경\r\n    // 나중에 버튼을 여러개 만들어 각각 선택할 수 있게 할까 고민중.\r\n    // switch - case로 변경 예정\r\n    if (embedWebsite.src === \"https://nomfilx-jiwon.netlify.app/#/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Music-Player/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Music-Player/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Typing-Game/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Typing-Game/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Hangman-Game/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Hangman-Game/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Expense-Tracker/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Expense-Tracker/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Speech-Text-Reader/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Speech-Text-Reader/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Sortable-List/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Sortable-List/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Breakout-Game/\"\r\n    } else {\r\n      embedWebsite.src = \"https://nomfilx-jiwon.netlify.app/#/\"\r\n    }\r\n  }\r\n\r\n  const selectBtn = document.createElement(\"button\")\r\n  selectBtn.innerHTML = props.text\r\n  selectBtn.style.width = \"100px\"\r\n  selectBtn.style.height = \"100px\"\r\n  selectBtn.style.fontSize = \"60px\"\r\n  selectBtn.style.borderRadius = \"100%\"\r\n  selectBtn.style.background = \"rgba(0,0,0,0.5)\"\r\n  selectBtn.style.color = \"white\"\r\n\r\n  selectBtn.onmouseover = () => {\r\n    selectBtn.style.color = \"skyblue\"\r\n    selectBtn.style.border = \"7px solid skyblue\"\r\n    selectBtn.style.cursor = \"pointer\"\r\n  }\r\n  selectBtn.onmouseleave = () => {\r\n    selectBtn.style.border = \"none\"\r\n\r\n    selectBtn.style.color = \"white\"\r\n  }\r\n\r\n  const selectBtnObj = new CSS3D.CSS3DObject(selectBtn)\r\n\r\n  selectBtnObjs.push(selectBtnObj)\r\n\r\n  selectBtnObj.position.set(props.btnPosition.x, props.btnPosition.y, props.btnPosition.z)\r\n  selectBtnObj.rotation.set(camera.rotation.x, camera.rotation.y, camera.rotation.z)\r\n  cssScene.add(selectBtnObj)\r\n\r\n  selectBtn.onclick = () => {\r\n    // 액자 모델 프레임\r\n    const meshsOfFrame =\r\n      frameGroupMesh?.children[0].children[0].children[0].children[0].children[0].children[0]\r\n        .children\r\n\r\n    if (props.text === \"0\") {\r\n      controls.target.set(0, 0, 0)\r\n    }\r\n\r\n    // TV 버튼을 클릭했을 경우\r\n    if (props.text === \"1\") {\r\n      controls.target.set(websiteObject.position.x, 0, websiteObject.position.z) // 예외적으로 타겟이 정해짐\r\n\r\n      camera.updateMatrix()\r\n\r\n      meshsOfFrame.map((object: { visible: boolean }) => {\r\n        object.visible = false\r\n      })\r\n    } // 프로젝트 변경 버튼을 클릭했을 경우\r\n    else if (props.text === \"✨\") {\r\n      chooseProject()\r\n      controls.target.set(websiteObject.position.x, 0, websiteObject.position.z)\r\n      camera.updateMatrix()\r\n      meshsOfFrame.map((object: { visible: boolean }) => {\r\n        object.visible = false\r\n      })\r\n    }\r\n\r\n    if (props.targetPosition) {\r\n      controls.target.set(props.targetPosition.x, props.targetPosition.y, props.targetPosition.z)\r\n    }\r\n    camera.position.set(props.cameraPosition.x, props.cameraPosition.y, props.cameraPosition.z)\r\n    camera.zoom = props.zoomIndex\r\n\r\n    camera.updateProjectionMatrix()\r\n    camera.updateMatrix()\r\n    cssScene.updateMatrixWorld()\r\n\r\n    // 카메라 자동 이동 시 iframe이 비활성화되는 현상 해결책\r\n    controls.rotateUp(-0.01)\r\n    controls.update()\r\n\r\n    selectBtnObjs.map((selectBtnObj) => {\r\n      selectBtnObj.scale.set(1, 1, 1)\r\n      selectBtnObj.rotation.set(camera.rotation.x, camera.rotation.y, camera.rotation.z)\r\n      camera.updateProjectionMatrix()\r\n      camera.updateMatrix()\r\n      cssScene.updateMatrixWorld()\r\n    })\r\n  }\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\CeilConnetor.ts",["178"],"import { scene } from \"../ThreeScene\"\r\nimport * as THREE from \"three\"\r\nimport { BackSide, FrontSide } from \"three\"\r\n\r\n// 천장과 벽지 이음새\r\nexport const addCeilConnector = (\r\n  scale: { x: number; y: number; z: number },\r\n  depth: number,\r\n  position: { x: number; y: number; z: number },\r\n  color: string,\r\n  rotation: { x: number; y: number; z: number }\r\n) => {\r\n  const shape = new THREE.Shape()\r\n  shape.moveTo(0, 0)\r\n  shape.lineTo(10, 0)\r\n  shape.lineTo(10, 10)\r\n\r\n  const setting = {\r\n    steps: 2,\r\n    depth,\r\n    bevelEnabled: true,\r\n    bevelThickness: 1,\r\n    bevelSize: 10,\r\n    bevelOffset: 0,\r\n    bevelSegments: 1,\r\n    curveSegments: 1,\r\n  }\r\n\r\n  const geometry = new THREE.ExtrudeGeometry(shape, setting)\r\n  const material = new THREE.MeshBasicMaterial({ color })\r\n  const mesh = new THREE.Mesh(geometry, material)\r\n  mesh.scale.set(scale.x, scale.y, scale.z)\r\n  mesh.rotation.set(rotation.x, rotation.y, rotation.z)\r\n  mesh.position.set(position.x, position.y, position.z)\r\n  material.side = FrontSide\r\n  scene.add(mesh)\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\MainHallObjects.ts",["179"],"import * as THREE from \"three\"\r\nimport { DoubleSide, VideoTexture } from \"three\"\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\r\nimport { scene } from \"../ThreeScene\"\r\nimport { FontLoder } from \"./FontLoader\"\r\nimport JsLogo from \"../../resources/images/vanillajs.png\"\r\nimport tsLogo from \"../../resources/images/tsLogo.png\"\r\nimport threejsLogo from \"../../resources/images/threejsLogo.png\"\r\nimport reactLogo from \"../../resources/images/reactLogo.jpg\"\r\n\r\nimport { addLogoBox } from \"./LogoBox\"\r\n\r\nconst loader = new GLTFLoader()\r\n\r\nconst MainHallObjects = () => {\r\n  // 알림판 모델 로드\r\n  loader.load(\"/models/futuristic_sandwich_board/scene.gltf\", (gltf) => {\r\n    gltf.scene.scale.set(400, 400, 400)\r\n    gltf.scene.position.set(800, -500, -1300)\r\n\r\n    gltf.scene.rotateY(Math.PI)\r\n    scene.add(gltf.scene)\r\n\r\n    // 알림판 앞면 커버\r\n    const JFlixRoomBoardGeo = new THREE.PlaneGeometry(350, 400)\r\n    const JFlixRoomBoardTexture = new THREE.TextureLoader().load(JsLogo)\r\n    const JFlixRoomBoardMat = new THREE.MeshPhongMaterial({\r\n      specular: \"orange\",\r\n      flatShading: true,\r\n      color: \"gray\",\r\n      map: JFlixRoomBoardTexture,\r\n    })\r\n    const JFlixRoomBoardMesh = new THREE.Mesh(JFlixRoomBoardGeo, JFlixRoomBoardMat)\r\n    JFlixRoomBoardMesh.position.set(800, -230, -1290)\r\n    JFlixRoomBoardMesh.rotation.set(Math.PI / 12, Math.PI, 0)\r\n    JFlixRoomBoardMesh.material.side = DoubleSide\r\n\r\n    // J-FLIX 안내판\r\n    FontLoder(\r\n      {\r\n        fontModelUrl: \"/fonts/helvetiker_regular.typeface.json\",\r\n        text: \"Vanilla-JS\\n\\nReact.js\",\r\n        size: 40,\r\n        height: 1,\r\n        color: 0xffffff,\r\n        bevelSize: 1,\r\n      },\r\n      { x: 900, y: -200, z: -1280 },\r\n      { x: Math.PI / 12, y: Math.PI, z: 0 }\r\n    )\r\n\r\n    scene.add(JFlixRoomBoardMesh)\r\n  })\r\n\r\n  // 미니 자동차 트랙\r\n  // loader.load(\"/models/drawer_of_blacksmith_table_-_a (1)/scene.gltf\", (gltf) => {\r\n  //   gltf.scene.scale.set(390, 500, 1100)\r\n  //   gltf.scene.position.set(100, 0, -3000)\r\n  //   scene.add(gltf.scene)\r\n  // })\r\n\r\n  // loader.load(\"/models/motocross_track/scene.gltf\", (gltf) => {\r\n  //   gltf.scene.scale.set(30, 30, 30)\r\n  //   gltf.scene.position.set(200, -210, -3000)\r\n  //   scene.add(gltf.scene)\r\n  // })\r\n\r\n  // 창문 모델 로드\r\n  loader.load(\"/models/window1/scene.gltf\", (gltf) => {\r\n    gltf.scene.scale.set(320, 370, 100)\r\n    gltf.scene.position.set(0, 70, -4050)\r\n    console.log(gltf.scene)\r\n\r\n    scene.add(gltf.scene)\r\n  })\r\n\r\n  // 기술 스택 로고 박스\r\n  addLogoBox({ x: -600, y: 200, z: -4000 }, threejsLogo)\r\n  addLogoBox({ x: -600, y: -100, z: -4000 }, reactLogo)\r\n  addLogoBox({ x: 600, y: 200, z: -4000 }, tsLogo)\r\n}\r\n\r\nexport default MainHallObjects\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\JustReadItObjs.ts",["180"],"import { scene } from \"../ThreeScene\"\r\nimport * as THREE from \"three\"\r\nimport { BackSide, DoubleSide } from \"three\"\r\nimport { GLTFModelLoader } from \"./GLTFModelLoader\"\r\nimport { FontLoder } from \"./FontLoader\"\r\nimport addDescriptionBoard from \"./DescriptionBoard\"\r\nimport { addSelectBtn } from \"./SelectBtn\"\r\nimport { addLogoBox } from \"./LogoBox\"\r\nimport nodeLogo from \"../../resources/images/nodeLogo.jpg\"\r\nimport mongoLogo from \"../../resources/images/mongoLogo.jpg\"\r\nimport jsLogo from \"../../resources/images/vanillajs.png\"\r\nimport herokuLogo from \"../../resources/images/herokuLogo.png\"\r\n\r\nexport const JustReadItObjs = () => {\r\n  const IntroVideo = document.createElement(\"video\")\r\n  IntroVideo.src = \"/videos/just-read-it.mp4\"\r\n  IntroVideo.autoplay = true\r\n  IntroVideo.loop = true\r\n\r\n  const videoTexture = new THREE.VideoTexture(IntroVideo)\r\n  videoTexture.minFilter = THREE.LinearFilter\r\n  videoTexture.magFilter = THREE.LinearFilter\r\n  videoTexture.format = THREE.RGBFormat\r\n  const rectangleGeo = new THREE.PlaneBufferGeometry(1600, 900)\r\n  const rectangleMat = new THREE.MeshBasicMaterial({ map: videoTexture, toneMapped: false })\r\n  rectangleMat.side = DoubleSide\r\n  videoTexture.needsUpdate = true\r\n  rectangleMat.needsUpdate = true\r\n\r\n  const videoMesh = new THREE.Mesh(rectangleGeo, rectangleMat)\r\n  videoMesh.rotateY(Math.PI / 2)\r\n  videoMesh.position.set(-4300, 500, -2500)\r\n  scene.add(videoMesh)\r\n\r\n  // 프로젝트 설명 보드\r\n  addDescriptionBoard({\r\n    siteUrl: \"https://just-read-it.herokuapp.com/\",\r\n    width: \"500px\",\r\n    height: \"400px\",\r\n    title: \"Just Read It\",\r\n    titleColor: \"orange\",\r\n    description:\r\n      \"node.js-express 서버와 자바스크립트 연습용 프로젝트입니다. css 애니메이션과 3D 효과에 가장 공을 들였습니다. \\n 1. \",\r\n    position: { x: -4300, y: -200, z: -3300 },\r\n    rotation: { x: 0, y: Math.PI / 2, z: 0 },\r\n  })\r\n\r\n  // 스켈레톤 책장 모델\r\n  GLTFModelLoader({\r\n    modelUrl: \"/models/bookshelf_household_props_12 (1)/scene.gltf\",\r\n    scale: { x: 1, y: 1, z: 1 },\r\n    position: { x: -2000, y: -500, z: -4000 },\r\n    rotation: { x: 0, y: 0, z: 0 },\r\n  })\r\n\r\n  // 일반 책장 모델\r\n  GLTFModelLoader({\r\n    modelUrl: \"/models/the_witchs_bookshelf/scene.gltf\",\r\n    scale: { x: 100, y: 100, z: 100 },\r\n    position: { x: -3500, y: -500, z: -3900 },\r\n    rotation: { x: 0, y: -Math.PI / 2, z: 0 },\r\n  })\r\n\r\n  // 책상 모델\r\n  GLTFModelLoader({\r\n    modelUrl: \"/models/table_with_things/scene.gltf\",\r\n    scale: { x: 80, y: 80, z: 80 },\r\n    position: { x: -3000, y: -500, z: -2500 },\r\n    rotation: { x: 0, y: -Math.PI / 2, z: 0 },\r\n  })\r\n\r\n  // 의자 모델\r\n  GLTFModelLoader({\r\n    modelUrl: \"/models/office_chair/scene.gltf\",\r\n    scale: { x: 6, y: 6, z: 6 },\r\n    position: { x: -2300, y: -400, z: -2000 },\r\n    rotation: { x: 0, y: Math.PI / 2, z: 0 },\r\n  })\r\n\r\n  // 프로젝트 제목 폰트모델\r\n  FontLoder(\r\n    {\r\n      fontModelUrl: \"/fonts/helvetiker_regular.typeface.json\",\r\n      text: \"Just-Read-It\",\r\n      size: 80,\r\n      height: 50,\r\n      color: 0xff991f,\r\n      bevelSize: 7,\r\n    },\r\n    { x: -3500, y: 700, z: -4000 }\r\n  )\r\n\r\n  // Just-Read-It 포커싱\r\n  addSelectBtn({\r\n    text: \"4\",\r\n    btnPosition: { x: -1500, y: 0, z: -3000 },\r\n    cameraPosition: { x: -2000, y: 500, z: -2500 },\r\n    targetPosition: { x: -3000, y: 500, z: -2500 },\r\n    zoomIndex: 0.2,\r\n  })\r\n\r\n  addLogoBox({ x: -2700, y: 500, z: -1100 }, nodeLogo)\r\n  addLogoBox({ x: -3000, y: 500, z: -1100 }, mongoLogo)\r\n  addLogoBox({ x: -3000, y: 200, z: -1100 }, jsLogo)\r\n  addLogoBox({ x: -2700, y: 200, z: -1100 }, herokuLogo)\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\Header.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\floor.ts",["181","182"],"import * as THREE from \"three\"\r\nimport { scene } from \"../ThreeScene\"\r\nimport floorImage2 from \"../../resources/images/floor2.jpg\"\r\nimport floorImage3 from \"../../resources/images/floor3.jpg\"\r\n\r\ninterface typeAddFloor {\r\n  width: number\r\n  height: number\r\n  position?: object\r\n  x: number\r\n  y: number\r\n  z: number\r\n  imageSrc: string\r\n}\r\n\r\nexport const addFloor = ({ width, height, x, y, z, imageSrc }: typeAddFloor) => {\r\n  const floorGeo = new THREE.PlaneBufferGeometry(width, height)\r\n  const floorTexture = new THREE.TextureLoader().load(imageSrc)\r\n  floorTexture.wrapS = floorTexture.wrapT = THREE.RepeatWrapping\r\n  floorTexture.repeat.set(7, 7)\r\n  floorTexture.encoding = THREE.sRGBEncoding\r\n\r\n  const floorMaterial = new THREE.MeshPhongMaterial({\r\n    map: floorTexture,\r\n    specular: \"orange\",\r\n    flatShading: true,\r\n  })\r\n\r\n  // 바닥 반사 효과\r\n  const cubeRenderTarget = new THREE.WebGLCubeRenderTarget(640, {\r\n    format: THREE.RGBFormat,\r\n    generateMipmaps: true,\r\n    minFilter: THREE.LinearMipmapLinearFilter,\r\n  })\r\n\r\n  const floorCamera = new THREE.CubeCamera(500, 1500, cubeRenderTarget)\r\n  floorCamera.position.set(0, 0, 0)\r\n  scene.add(floorCamera)\r\n\r\n  const floorMesh = new THREE.Mesh(floorGeo, floorMaterial)\r\n  floorMesh.position.set(0, 100, 0)\r\n  floorMesh.receiveShadow = true\r\n  floorMesh.rotateX(-Math.PI / 2) // -90도 로테이션\r\n  floorMesh.position.set(x, y, z) // 위치 조정\r\n  scene.add(floorMesh)\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\DescriptionBoard.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\ONObjects.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\iframeObj.ts",[],["183","184"],{"ruleId":"185","replacedBy":"186"},{"ruleId":"187","replacedBy":"188"},{"ruleId":"189","severity":1,"message":"190","line":5,"column":22,"nodeType":"191","messageId":"192","endLine":5,"endColumn":31},{"ruleId":"189","severity":1,"message":"193","line":10,"column":10,"nodeType":"191","messageId":"192","endLine":10,"endColumn":19},{"ruleId":"189","severity":1,"message":"194","line":14,"column":10,"nodeType":"191","messageId":"192","endLine":14,"endColumn":27},{"ruleId":"189","severity":1,"message":"195","line":17,"column":10,"nodeType":"191","messageId":"192","endLine":17,"endColumn":26},{"ruleId":"189","severity":1,"message":"196","line":18,"column":10,"nodeType":"191","messageId":"192","endLine":18,"endColumn":18},{"ruleId":"189","severity":1,"message":"197","line":89,"column":11,"nodeType":"191","messageId":"192","endLine":89,"endColumn":26},{"ruleId":"189","severity":1,"message":"198","line":191,"column":11,"nodeType":"191","messageId":"192","endLine":191,"endColumn":26},{"ruleId":"199","severity":1,"message":"200","line":523,"column":44,"nodeType":"201","messageId":"202","endLine":523,"endColumn":46},{"ruleId":"199","severity":1,"message":"200","line":542,"column":44,"nodeType":"201","messageId":"202","endLine":542,"endColumn":46},{"ruleId":"199","severity":1,"message":"200","line":560,"column":42,"nodeType":"201","messageId":"202","endLine":560,"endColumn":44},{"ruleId":"199","severity":1,"message":"200","line":568,"column":42,"nodeType":"201","messageId":"202","endLine":568,"endColumn":44},{"ruleId":"189","severity":1,"message":"203","line":3,"column":8,"nodeType":"191","messageId":"192","endLine":3,"endColumn":19},{"ruleId":"189","severity":1,"message":"204","line":4,"column":8,"nodeType":"191","messageId":"192","endLine":4,"endColumn":19},{"ruleId":"189","severity":1,"message":"205","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":21},{"ruleId":"189","severity":1,"message":"206","line":3,"column":13,"nodeType":"191","messageId":"192","endLine":3,"endColumn":18},{"ruleId":"189","severity":1,"message":"207","line":24,"column":9,"nodeType":"191","messageId":"192","endLine":24,"endColumn":22},{"ruleId":"189","severity":1,"message":"206","line":1,"column":13,"nodeType":"191","messageId":"192","endLine":1,"endColumn":18},{"ruleId":"189","severity":1,"message":"208","line":10,"column":8,"nodeType":"191","messageId":"192","endLine":10,"endColumn":18},{"ruleId":"189","severity":1,"message":"209","line":14,"column":8,"nodeType":"191","messageId":"192","endLine":14,"endColumn":13},{"ruleId":"189","severity":1,"message":"210","line":15,"column":10,"nodeType":"191","messageId":"192","endLine":15,"endColumn":18},{"ruleId":"211","severity":1,"message":"212","line":134,"column":12,"nodeType":"213","messageId":"214","endLine":134,"endColumn":29},{"ruleId":"211","severity":1,"message":"212","line":150,"column":12,"nodeType":"213","messageId":"214","endLine":150,"endColumn":29},{"ruleId":"189","severity":1,"message":"215","line":12,"column":9,"nodeType":"191","messageId":"192","endLine":12,"endColumn":19},{"ruleId":"189","severity":1,"message":"216","line":15,"column":9,"nodeType":"191","messageId":"192","endLine":15,"endColumn":19},{"ruleId":"185","replacedBy":"217"},{"ruleId":"187","replacedBy":"218"},{"ruleId":"189","severity":1,"message":"219","line":5,"column":10,"nodeType":"191","messageId":"192","endLine":5,"endColumn":26},{"ruleId":"199","severity":1,"message":"200","line":28,"column":33,"nodeType":"201","messageId":"202","endLine":28,"endColumn":35},{"ruleId":"189","severity":1,"message":"206","line":1,"column":13,"nodeType":"191","messageId":"192","endLine":1,"endColumn":18},{"ruleId":"189","severity":1,"message":"205","line":2,"column":10,"nodeType":"191","messageId":"192","endLine":2,"endColumn":21},{"ruleId":"189","severity":1,"message":"220","line":5,"column":3,"nodeType":"191","messageId":"192","endLine":5,"endColumn":8},{"ruleId":"199","severity":1,"message":"200","line":90,"column":55,"nodeType":"201","messageId":"202","endLine":90,"endColumn":57},{"ruleId":"199","severity":1,"message":"200","line":98,"column":55,"nodeType":"201","messageId":"202","endLine":98,"endColumn":57},{"ruleId":"199","severity":1,"message":"200","line":117,"column":38,"nodeType":"201","messageId":"202","endLine":117,"endColumn":40},{"ruleId":"189","severity":1,"message":"221","line":3,"column":10,"nodeType":"191","messageId":"192","endLine":3,"endColumn":18},{"ruleId":"189","severity":1,"message":"222","line":2,"column":22,"nodeType":"191","messageId":"192","endLine":2,"endColumn":34},{"ruleId":"189","severity":1,"message":"221","line":3,"column":10,"nodeType":"191","messageId":"192","endLine":3,"endColumn":18},{"ruleId":"189","severity":1,"message":"203","line":3,"column":8,"nodeType":"191","messageId":"192","endLine":3,"endColumn":19},{"ruleId":"189","severity":1,"message":"204","line":4,"column":8,"nodeType":"191","messageId":"192","endLine":4,"endColumn":19},{"ruleId":"185","replacedBy":"223"},{"ruleId":"187","replacedBy":"224"},"no-native-reassign",["225"],"no-negated-in-lhs",["226"],"@typescript-eslint/no-unused-vars","'FrontSide' is defined but never used.","Identifier","unusedVar","'addWindow' is defined but never used.","'addRoofWindowHole' is defined but never used.","'addBackgroundBox' is defined but never used.","'addFrame' is defined but never used.","'buildingTexture' is assigned a value but never used.","'project3BuffGeo' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'floorImage2' is defined but never used.","'floorImage3' is defined but never used.","'FlatShading' is defined but never used.","'THREE' is defined but never used.","'JFlixDoorHole' is assigned a value but never used.","'sunsetImg1' is defined but never used.","'CSS3D' is defined but never used.","'cssScene' is defined but never used.","@typescript-eslint/consistent-type-assertions","Use 'as THREE.Mesh' instead of '<THREE.Mesh>'.","TSTypeAssertion","as","'texture_bk' is assigned a value but never used.","'texture_up' is assigned a value but never used.",["225"],["226"],"'PointLightHelper' is defined but never used.","'scene' is defined but never used.","'BackSide' is defined but never used.","'VideoTexture' is defined but never used.",["225"],["226"],"no-global-assign","no-unsafe-negation"]