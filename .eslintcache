[{"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\index.tsx":"1","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\reportWebVitals.ts":"2","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\GlobalStyles.ts":"3","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\App.tsx":"4","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\routes.tsx":"5","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Home.tsx":"6","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Exhibition.tsx":"7","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Interested.tsx":"8","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\SkewScrollMenu.tsx":"9","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeScene.tsx":"10","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\DirectionalLight.ts":"11","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Floor.ts":"12","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\LogoBox.ts":"13","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Window.ts":"14","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\FontLoader.ts":"15","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SunLight.ts":"16","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SpotLight.ts":"17","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\RoofWIndowHole.ts":"18","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\GLTFModelLoader.ts":"19","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\JFlixObjects.ts":"20","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\BackgroundBox.ts":"21","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Frame.ts":"22","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SelectBtn.ts":"23","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\CeilConnetor.ts":"24"},{"size":567,"mtime":1610446256210,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":1607822105962,"results":"27","hashOfConfig":"26"},{"size":259,"mtime":1610446268792,"results":"28","hashOfConfig":"26"},{"size":231,"mtime":1610446252706,"results":"29","hashOfConfig":"26"},{"size":562,"mtime":1610446261138,"results":"30","hashOfConfig":"26"},{"size":1164,"mtime":1610446245540,"results":"31","hashOfConfig":"26"},{"size":486,"mtime":1610951224009,"results":"32","hashOfConfig":"26"},{"size":1636,"mtime":1610446241187,"results":"33","hashOfConfig":"26"},{"size":4651,"mtime":1611657410924,"results":"34","hashOfConfig":"26"},{"size":19578,"mtime":1611852906750,"results":"35","hashOfConfig":"26"},{"size":683,"mtime":1611835456890,"results":"36","hashOfConfig":"26"},{"size":1538,"mtime":1611854142700,"results":"37","hashOfConfig":"26"},{"size":610,"mtime":1611835525315,"results":"38","hashOfConfig":"26"},{"size":616,"mtime":1611487442195,"results":"39","hashOfConfig":"26"},{"size":988,"mtime":1611225378279,"results":"40","hashOfConfig":"26"},{"size":1939,"mtime":1611225366569,"results":"41","hashOfConfig":"26"},{"size":758,"mtime":1611833519306,"results":"42","hashOfConfig":"26"},{"size":3097,"mtime":1611024865494,"results":"43","hashOfConfig":"26"},{"size":643,"mtime":1611225380813,"results":"44","hashOfConfig":"26"},{"size":2291,"mtime":1611837684240,"results":"45","hashOfConfig":"26"},{"size":1716,"mtime":1611753531363,"results":"46","hashOfConfig":"26"},{"size":2005,"mtime":1611756294731,"results":"47","hashOfConfig":"26"},{"size":4350,"mtime":1611852183630,"results":"48","hashOfConfig":"26"},{"size":1030,"mtime":1611761385155,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"35bok3",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"68","messages":"69","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"52"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"77","messages":"78","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"97","usedDeprecatedRules":"52"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"52"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"103","usedDeprecatedRules":"52"},{"filePath":"104","messages":"105","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"106","usedDeprecatedRules":"52"},"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\index.tsx",[],["107","108"],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\reportWebVitals.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\GlobalStyles.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\App.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\routes.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Home.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Exhibition.tsx",["109"],"import React from \"react\"\r\nimport styled from \"styled-components\"\r\nimport ThreeScene from \"../Components/ThreeScene\"\r\n\r\nconst Container = styled.section`\r\n  width: 100vw;\r\n  height: 100vh;\r\n  overflow: auto;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  background-color: white;\r\n  opacity: 1;\r\n  cursor: grab;\r\n  cursor: -moz-grab;\r\n  cursor: -webkit-grab;\r\n`\r\n\r\nconst Exhibition: React.FC = () => {\r\n  return <ThreeScene />\r\n}\r\n\r\nexport default Exhibition\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Screen\\Interested.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\SkewScrollMenu.tsx",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeScene.tsx",["110","111","112","113","114","115"],"import React, { useEffect, useRef } from \"react\"\r\nimport * as THREE from \"three\"\r\nimport styled from \"styled-components\"\r\nimport { OrbitControls } from \"three-orbitcontrols-ts\"\r\nimport { DoubleSide } from \"three\"\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\r\nimport CSS3D from \"three-css3drenderer\"\r\n\r\n// 이미지 임포트\r\nimport { addWindow } from \"./ThreeModules/Window\"\r\nimport { addDirLight } from \"./ThreeModules/DirectionalLight\"\r\nimport { addSpotLight } from \"./ThreeModules/SpotLight\"\r\nimport { addFloor } from \"./ThreeModules/Floor\"\r\nimport { addRoofWindowHole } from \"./ThreeModules/RoofWIndowHole\"\r\nimport { addSunLight } from \"./ThreeModules/SunLight\"\r\nimport { JFlixObjects } from \"./ThreeModules/JFlixObjects\"\r\nimport { addBackgroundBox } from \"./ThreeModules/BackgroundBox\"\r\nimport { addFrame } from \"./ThreeModules/Frame\"\r\nimport { addSelectBtn } from \"./ThreeModules/SelectBtn\"\r\nimport { addCeilConnector } from \"./ThreeModules/CeilConnetor\"\r\n\r\nconst Container = styled.div`\r\n  cursor: grab;\r\n  cursor: -moz-grab;\r\n  cursor: -webkit-grab;\r\n  :active {\r\n    cursor: grabbing;\r\n  }\r\n`\r\n\r\nexport let camera: THREE.PerspectiveCamera\r\nexport let scene: THREE.Scene\r\nexport let renderer: THREE.WebGLRenderer\r\nexport let controls: OrbitControls\r\nexport let composer: { addPass: (arg0: any) => void; render: (arg0: number) => void }\r\nexport let floorCamera: THREE.CubeCamera\r\nexport let floorMesh: THREE.Mesh\r\nlet cssRenderer: {\r\n  setSize: (arg0: number, arg1: number) => void\r\n  domElement: any\r\n  render: (arg0: THREE.Scene, arg1: THREE.PerspectiveCamera) => void\r\n}\r\nexport let cssScene: THREE.Scene\r\nexport let selectBtnObjs: any[] = []\r\nlet raycaster = new THREE.Raycaster()\r\nlet mouse = new THREE.Vector2()\r\nexport let embedWebsite: HTMLIFrameElement\r\nexport let websiteObject: THREE.Object3D\r\nlet frameCount = 0\r\nconst ThreeScene = () => {\r\n  const ThreeContainer = useRef<HTMLDivElement>(null)\r\n\r\n  // 작동이 안되어 고칠 필요가 있음\r\n  function resize() {\r\n    if (ThreeContainer.current) {\r\n      // cssRenderer.setSize(ThreeContainer.current?.clientWidth, ThreeContainer.current?.clientHeight)\r\n      // renderer.setSize(ThreeContainer.current?.clientWidth, ThreeContainer.current?.clientHeight)\r\n      // camera.aspect = ThreeContainer.current?.clientWidth / ThreeContainer.current?.clientHeight\r\n      // camera.updateProjectionMatrix()\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    camera = new THREE.PerspectiveCamera(10, window.innerWidth / window.innerHeight, 1, 21000)\r\n    camera.position.set(0, 0, 5000)\r\n    scene = new THREE.Scene()\r\n    cssRenderer = new CSS3D.CSS3DRenderer()\r\n    cssScene = new THREE.Scene()\r\n    cssRenderer.setSize(window.innerWidth, window.innerHeight)\r\n    cssRenderer.domElement.style.top = 0\r\n    cssRenderer.domElement.style.position = \"absolute\"\r\n    cssRenderer.domElement.style.zIndex = \"5\"\r\n    ThreeContainer?.current?.appendChild(cssRenderer.domElement)\r\n\r\n    // 건물 박스\r\n    const buildingGeometry = new THREE.BoxGeometry(2500, 1000, 3000)\r\n    const buildingTexture = new THREE.TextureLoader()\r\n    const buildingMaterial = new THREE.MeshPhongMaterial({\r\n      color: 0xffffff,\r\n      specular: \"blue\",\r\n      flatShading: true,\r\n    })\r\n    const ExhibitionRoom = new THREE.Mesh(buildingGeometry, buildingMaterial)\r\n    ExhibitionRoom.position.set(0, 0, -2500)\r\n\r\n    ExhibitionRoom.material.side = THREE.BackSide // mesh 내부에서만 면이 보이게 만들어 줌.\r\n\r\n    const ambientLight = new THREE.AmbientLight(0xffffff, 0.4) // soft white light\r\n\r\n    ambientLight.position.set(0, 0, 0)\r\n    scene.add(ambientLight)\r\n\r\n    //// 프로젝트 방 (J-Flix) ////\r\n\r\n    const project1Geo = new THREE.BoxGeometry(3000, 1000, 2000)\r\n\r\n    const project1Mat = new THREE.MeshPhongMaterial({\r\n      color: 0xffffff,\r\n      specular: \"orange\",\r\n      flatShading: true,\r\n    })\r\n    const project1Mesh = new THREE.Mesh(project1Geo, project1Mat)\r\n\r\n    ExhibitionRoom.updateMatrix()\r\n    project1Geo.merge(buildingGeometry, ExhibitionRoom.matrix)\r\n\r\n    const newMesh = new THREE.Mesh(project1Geo, project1Mat)\r\n    newMesh.material.side = THREE.BackSide\r\n    // 윗면 faces 지우기 <- 효율적인 방법 찾기\r\n    newMesh.geometry.faces.splice(4, 2)\r\n    scene.add(newMesh)\r\n\r\n    // 디렉셔널 라이트 (햇빛)\r\n    addDirLight({ x: -1000, y: 2000, z: 2000 }, { x: -500, y: 1000, z: 800 })\r\n\r\n    addDirLight({ x: 0, y: 2000, z: -2000 }, { x: 0, y: 1000, z: 0 })\r\n\r\n    // 스포트라이트 (창문 통과하는 햇빛)\r\n    addSpotLight({ x: -900, y: 750, z: 800 }, { x: -400, y: -500, z: -100 }, Math.PI / 18)\r\n\r\n    // 바닥\r\n\r\n    addFloor({ width: 3000, height: 2000, x: 0, y: -490, z: 0 })\r\n\r\n    ////\r\n\r\n    // 지붕\r\n    const roofShape = new THREE.Shape()\r\n    roofShape.moveTo(0, 0)\r\n    roofShape.lineTo(1000, 1000) // rotate로 인해 x는 높이, y는 깊이\r\n    roofShape.lineTo(0, 2000)\r\n\r\n    const extrudeSettings = {\r\n      steps: 2,\r\n      depth: 3000, // Z축: 깊이 (rotate로 인해 너비가 됨)\r\n      bevelEnabled: true,\r\n      bevelThickness: 1,\r\n      bevelSize: 1,\r\n      bevelOffset: 0,\r\n      bevelSegments: 1,\r\n    }\r\n\r\n    const roofGeometry = new THREE.ExtrudeGeometry(roofShape, extrudeSettings)\r\n    const roofMaterial = new THREE.MeshPhongMaterial({\r\n      color: 0xf79001,\r\n      specular: \"orange\",\r\n      flatShading: true,\r\n    })\r\n    roofMaterial.side = THREE.DoubleSide\r\n    const roofMesh = new THREE.Mesh(roofGeometry, roofMaterial)\r\n\r\n    console.log(roofGeometry.faces)\r\n    roofGeometry.faces.splice(20, 4) // 지붕의 밑면 제거\r\n\r\n    // 창문 구멍 뚫기\r\n\r\n    addRoofWindowHole(roofMesh)\r\n\r\n    // GLTF 로더 //\r\n\r\n    // 지붕에 달린 창문 (앞면 3개)\r\n\r\n    addWindow(\r\n      { x: -750, y: 975, z: 500 },\r\n      { x: 400, y: 315, z: 300 },\r\n      { x: -Math.PI / 4, y: -Math.PI, z: 0 }\r\n    ) // Arguments: {position, scale, rotation}\r\n    addWindow(\r\n      { x: 0, y: 975, z: 500 },\r\n      { x: 400, y: 315, z: 300 },\r\n      { x: -Math.PI / 4, y: -Math.PI, z: 0 }\r\n    )\r\n    addWindow(\r\n      { x: 750, y: 975, z: 500 },\r\n      { x: 400, y: 315, z: 300 },\r\n      { x: -Math.PI / 4, y: -Math.PI, z: 0 }\r\n    )\r\n\r\n    // 지붕에 달린 창문 (뒷면 1개)\r\n\r\n    addWindow(\r\n      { x: 0, y: 1050, z: -400 },\r\n      { x: 500, y: 350, z: 300 },\r\n      { x: Math.PI / 4, y: -Math.PI, z: 0 }\r\n    )\r\n\r\n    // 창문 밝히기\r\n    const windowLight = new THREE.RectAreaLight(0xffffff)\r\n    windowLight.position.set(-1000, 1300, 700)\r\n    windowLight.intensity = 200\r\n    windowLight.width = 500\r\n    windowLight.height = 500\r\n    windowLight.lookAt(-750, 975, 500)\r\n    scene.add(windowLight)\r\n\r\n    // 벽에 붙일 책 모형\r\n    const loader = new GLTFLoader()\r\n    loader.load(\"/models/book/scene.gltf\", (gltf) => {\r\n      gltf.scene.scale.set(1000, 1000, 1000)\r\n      gltf.scene.rotateX(Math.PI / 2)\r\n      gltf.scene.position.set(-300, 0, -900)\r\n      scene.add(gltf.scene)\r\n    })\r\n    const bookCoverMesh = new THREE.Mesh(\r\n      new THREE.PlaneBufferGeometry(720, 1000, 40),\r\n      new THREE.MeshPhongMaterial({ color: 0x292a2e, specular: \"orange\", flatShading: true })\r\n    )\r\n    bookCoverMesh.position.set(100, 0, -890)\r\n    bookCoverMesh.material.side = DoubleSide\r\n    scene.add(bookCoverMesh)\r\n\r\n    // TV GLTF 모델 로드\r\n    loader.load(\"/models/2018_flat_screen_tv/scene.gltf\", (gltf) => {\r\n      gltf.scene.scale.set(750, 750, 2000)\r\n      gltf.scene.position.set(-1200, 0, 0)\r\n\r\n      gltf.scene.rotateY(Math.PI / 2)\r\n      scene.add(gltf.scene)\r\n    })\r\n\r\n    JFlixObjects()\r\n\r\n    // 자동차 모델 로드\r\n\r\n    loader.load(\"/models/free_porsche_911_carrera_4s/scene.gltf\", (gltf) => {\r\n      let wheel: THREE.Group\r\n      let rotateIndex = 0\r\n      loader.load(\"/models/sports_car_wheel/scene.gltf\", (wheelGltf) => {\r\n        wheelGltf.scene.scale.set(240, 240, 240)\r\n        wheelGltf.scene.position.set(-750, -300, 3390)\r\n\r\n        scene.add(wheelGltf.scene)\r\n        wheel = wheelGltf.scene\r\n      })\r\n      gltf.scene.scale.set(300, 300, 300)\r\n      gltf.scene.position.set(-500, -200, 3000)\r\n      scene.add(gltf.scene)\r\n\r\n      // 자동차 바퀴 제거: rotation 애니메이션 구현을 위해 다른 바퀴 로드 필요.\r\n      gltf.scene.children[0].children[0].children[0].children[7].visible = false\r\n      gltf.scene.children[0].children[0].children[0].children[20].visible = false\r\n\r\n      // 자동차 컨트롤\r\n      let keysPressed = { ArrowUp: false, ArrowDown: false, ArrowLeft: false, ArrowRight: false }\r\n\r\n      window.addEventListener(\"keydown\", (e) => {\r\n        console.log(e.key)\r\n        if (e.key === \"ArrowUp\") {\r\n          keysPressed.ArrowUp = true\r\n        } else if (e.key === \"ArrowDown\") {\r\n          keysPressed.ArrowDown = true\r\n        } else if (e.key === \"ArrowLeft\") {\r\n          keysPressed.ArrowLeft = true\r\n        } else if (e.key === \"ArrowRight\") {\r\n          keysPressed.ArrowRight = true\r\n        }\r\n\r\n        if (keysPressed.ArrowUp) {\r\n          // 바퀴 돌리기\r\n          setInterval(() => {\r\n            rotateIndex += 2\r\n            wheel.rotation.x = rotateIndex\r\n          }, 10)\r\n          const forwardSoundUrl = \"/sounds/car-start.mp3\"\r\n          const soundEffect = document.createElement(\"audio\")\r\n          const audioSource = document.createElement(\"source\")\r\n          soundEffect.appendChild(audioSource)\r\n          soundEffect.currentTime = 1\r\n          audioSource.src = forwardSoundUrl\r\n          soundEffect.play()\r\n          setTimeout(() => soundEffect.pause(), 2000)\r\n          // 가속력을 고려한 자동차의 움직임 구현\r\n          gltf.scene.translateZ(60)\r\n\r\n          const moveFoward = setInterval(() => {\r\n            gltf.scene.translateZ(10)\r\n            wheel.position.z += 17\r\n          }, 100)\r\n          setTimeout(() => clearInterval(moveFoward), 1000)\r\n        } else if (keysPressed.ArrowDown) {\r\n          gltf.scene.translateZ(-60)\r\n          const moveBackward = setInterval(() => gltf.scene.translateZ(-10), 100)\r\n          setTimeout(() => clearInterval(moveBackward), 1000)\r\n        } else if (keysPressed.ArrowLeft) {\r\n          gltf.scene.rotateY(0.2)\r\n        } else if (keysPressed.ArrowRight) {\r\n          gltf.scene.rotateY(-0.2)\r\n        }\r\n        window.addEventListener(\"keyup\", (e) => {\r\n          if (e.key === \"ArrowUp\") {\r\n            keysPressed.ArrowUp = false\r\n          } else if (e.key === \"ArrowDown\") {\r\n            keysPressed.ArrowDown = false\r\n          } else if (e.key === \"ArrowLeft\") {\r\n            keysPressed.ArrowLeft = false\r\n          } else if (e.key === \"ArrowRight\") {\r\n            keysPressed.ArrowRight = false\r\n          }\r\n        })\r\n      })\r\n    })\r\n    const carLight = new THREE.PointLight(0xffffff, 10, 2000)\r\n    carLight.position.set(0, -200, 3000)\r\n    const lightIndicator = new THREE.PointLightHelper(carLight, 300)\r\n    lightIndicator.color = 0x3f83f8\r\n\r\n    const carLight2 = new THREE.PointLight(0x119be3, 10, 2000)\r\n    carLight2.position.set(-1000, -200, 3000)\r\n    const lightIndicator2 = new THREE.PointLightHelper(carLight2, 300)\r\n    lightIndicator2.color = 0x3f83f8\r\n\r\n    const carLight3 = new THREE.PointLight(0xffffff, 10, 3000)\r\n    carLight3.position.set(-500, -200, 4000)\r\n    const lightIndicator3 = new THREE.PointLightHelper(carLight3, 300)\r\n    lightIndicator3.color = 0x3f83f8\r\n\r\n    scene.add(carLight)\r\n    scene.add(lightIndicator)\r\n    scene.add(carLight2)\r\n    scene.add(lightIndicator2)\r\n    scene.add(carLight3)\r\n    scene.add(lightIndicator3)\r\n\r\n    // 노을 배경 박스 생성\r\n    addBackgroundBox()\r\n\r\n    // 액자 모델 추가, 노마드 로고 그림 배치\r\n    addFrame()\r\n\r\n    // 레이캐스터 (클릭이벤트)\r\n    // 마우스 움직일 때마다 오브젝트 감지\r\n\r\n    const onMouseMove = (event: { clientX: number; clientY: number }) => {\r\n      // calculate mouse position in normalized device coordinates\r\n      // (-1 to +1) for both components\r\n\r\n      mouse.x = (event.clientX / window.innerWidth) * 2 - 1\r\n      mouse.y = -(event.clientY / window.innerHeight) * 2 + 1\r\n\r\n      // update the picking ray with the camera and mouse position\r\n      raycaster.setFromCamera(mouse, camera)\r\n      // calculate objects intersecting the picking ray\r\n      const intersects = raycaster.intersectObjects(scene.children)\r\n\r\n      for (let i = 0; i < intersects.length; i++) {\r\n        // 임의로 지정해 줬던 object name으로 구별\r\n      }\r\n    }\r\n\r\n    // 천장과 벽지 이음새 생성\r\n    addCeilConnector({ x: 2, y: 3, z: 9.9 }, 200, { x: 1480, y: 490, z: -1000 }, \"black\", {\r\n      x: 0,\r\n      y: 0,\r\n      z: Math.PI / 2,\r\n    })\r\n\r\n    addCeilConnector({ x: 2, y: 3, z: 9.9 }, 200, { x: -1460, y: 490, z: -1000 }, \"black\", {\r\n      x: 0,\r\n      y: 0,\r\n      z: Math.PI,\r\n    })\r\n\r\n    addCeilConnector({ x: 2, y: 3, z: 9.9 }, 300, { x: -1460, y: 480, z: -970 }, \"black\", {\r\n      x: 0,\r\n      y: Math.PI / 2,\r\n      z: Math.PI / 2,\r\n    })\r\n    addCeilConnector({ x: 2, y: 3, z: 9.9 }, 300, { x: -1460, y: 485, z: 970 }, \"black\", {\r\n      x: 0,\r\n      y: Math.PI / 2,\r\n      z: -Math.PI / 2,\r\n    })\r\n\r\n    // 바닥 이음새\r\n    addCeilConnector({ x: 2, y: 3, z: 9.9 }, 200, { x: 1480, y: -490, z: -1000 }, \"grey\", {\r\n      x: 0,\r\n      y: 0,\r\n      z: Math.PI / 2,\r\n    })\r\n\r\n    addCeilConnector({ x: 2, y: 3, z: 9.9 }, 200, { x: -1460, y: -490, z: -1000 }, \"grey\", {\r\n      x: 0,\r\n      y: 0,\r\n      z: Math.PI,\r\n    })\r\n\r\n    addCeilConnector({ x: 2, y: 3, z: 9.9 }, 300, { x: -1460, y: -480, z: -970 }, \"grey\", {\r\n      x: 0,\r\n      y: Math.PI / 2,\r\n      z: Math.PI / 2,\r\n    })\r\n\r\n    addCeilConnector({ x: 2, y: 3, z: 9.9 }, 300, { x: -1460, y: -485, z: 970 }, \"grey\", {\r\n      x: 0,\r\n      y: Math.PI / 2,\r\n      z: -Math.PI / 2,\r\n    })\r\n\r\n    // 렌더러\r\n    renderer = new THREE.WebGLRenderer({\r\n      antialias: true,\r\n      alpha: true,\r\n      preserveDrawingBuffer: true,\r\n    })\r\n\r\n    renderer.setPixelRatio(window.devicePixelRatio)\r\n    renderer.setSize(window.innerWidth, window.innerHeight)\r\n    renderer.setClearColor(0xffffff, 0.5)\r\n    renderer.domElement.style.position = \"absolute\"\r\n    renderer.domElement.style.top = \"0\"\r\n    renderer.domElement.style.zIndex = \"1\"\r\n\r\n    // Three.js에 html embed 시키기\r\n\r\n    const geometry = new THREE.PlaneBufferGeometry(1400, 800)\r\n\r\n    const material = new THREE.MeshBasicMaterial({\r\n      color: 0xffffff,\r\n      opacity: 0.0,\r\n      side: THREE.DoubleSide,\r\n    })\r\n    const planeMesh = new THREE.Mesh(geometry, material)\r\n    planeMesh.position.set(-1200, 10, 0)\r\n    planeMesh.rotation.set(0, Math.PI / 2, 0)\r\n    scene.add(planeMesh)\r\n\r\n    embedWebsite = document.createElement(\"iframe\")\r\n    embedWebsite.src = \"https://nomfilx-jiwon.netlify.app/#/\"\r\n    embedWebsite.width = \"1400px\"\r\n    embedWebsite.height = \"800px\"\r\n\r\n    websiteObject = new CSS3D.CSS3DObject(embedWebsite)\r\n    websiteObject.position.set(planeMesh.position.x, planeMesh.position.y, planeMesh.position.z)\r\n    websiteObject.rotation.set(0, Math.PI / 2, 0)\r\n    cssScene.add(websiteObject)\r\n\r\n    // TV 뒷면 가리기 위한 Div Box\r\n\r\n    const tvBackCover = document.createElement(\"div\")\r\n\r\n    tvBackCover.style.width = \"1400px\"\r\n    tvBackCover.style.height = \"800px\"\r\n    tvBackCover.style.backgroundColor = \"black\"\r\n    tvBackCover.style.color = \"white\"\r\n    tvBackCover.style.fontSize = \"80px\"\r\n\r\n    const tvBackCoverObject = new CSS3D.CSS3DObject(tvBackCover)\r\n    tvBackCoverObject.position.set(\r\n      planeMesh.position.x - 3,\r\n      planeMesh.position.y,\r\n      planeMesh.position.z\r\n    )\r\n    tvBackCoverObject.rotation.set(0, Math.PI / 2, 0)\r\n    cssScene.add(tvBackCoverObject)\r\n\r\n    // 선택 버튼 생성\r\n\r\n    // tv 포커싱\r\n    addSelectBtn({\r\n      text: \"1\",\r\n      btnPosition: { x: -1300, y: 600, z: 500 },\r\n      cameraPosition: { x: 4991.472829384942, y: 0, z: 0 },\r\n      zoomIndex: 0.8,\r\n    })\r\n\r\n    // 채널 변경 버튼 & tv 포커싱\r\n    addSelectBtn({\r\n      text: \"✨\",\r\n      btnPosition: { x: -1300, y: 600, z: 0 },\r\n      cameraPosition: { x: 4991.472829384942, y: 0, z: 0 },\r\n      zoomIndex: 0.8,\r\n    })\r\n\r\n    // J-Flix 방 포커싱\r\n    addSelectBtn({\r\n      text: \"0\",\r\n      btnPosition: { x: 0, y: 300, z: -800 },\r\n      cameraPosition: { x: -2773.8192101111504, y: 490.0248603839669, z: 4120.7527992239675 },\r\n      zoomIndex: 0.3,\r\n    })\r\n\r\n    // const btnMap = new THREE.TextureLoader().load(nomadLogo)\r\n    // const btnMat = new THREE.SpriteMaterial({\r\n    //   map: btnMap,\r\n    // })\r\n\r\n    // const sprite = new THREE.Sprite(btnMat)\r\n    // sprite.scale.set(100, 100, 100)\r\n    // scene.add(sprite)\r\n\r\n    // 갓레이이펙트\r\n\r\n    composer = addSunLight({ x: -600, y: 200, z: 100 })\r\n    composer = addSunLight({ x: 200, y: 200, z: 100 })\r\n    composer = addSunLight({ x: 1000, y: 200, z: 100 })\r\n\r\n    controls = new OrbitControls(camera, cssRenderer.domElement)\r\n\r\n    // 마우스 휠로 줌 조절\r\n    // 확대\r\n    controls.dollyOut = function () {\r\n      if (camera.zoom < 5) {\r\n        camera.zoom = camera.zoom + 0.1\r\n        camera.updateProjectionMatrix()\r\n\r\n        // 카메라 줌에 따른 버튼 크기 조정\r\n        if (selectBtnObjs) {\r\n          selectBtnObjs.map((selectBtnObj) => {\r\n            if (selectBtnObj.scale.x > 1) {\r\n              selectBtnObj.scale.set(\r\n                selectBtnObj.scale.x - 0.3,\r\n                selectBtnObj.scale.y - 0.3,\r\n                selectBtnObj.scale.z - 0.3\r\n              )\r\n            }\r\n          })\r\n        }\r\n        console.log(camera.zoom)\r\n      }\r\n    }\r\n    // 축소\r\n    controls.dollyIn = function () {\r\n      if (camera.zoom > 0.2) {\r\n        camera.zoom = camera.zoom - 0.1\r\n\r\n        // 카메라 줌에 따른 버튼 크기 조정\r\n        if (selectBtnObjs) {\r\n          selectBtnObjs.map((selectBtnObj) => {\r\n            selectBtnObj.scale.set(\r\n              selectBtnObj.scale.x + 0.3,\r\n              selectBtnObj.scale.y + 0.3,\r\n              selectBtnObj.scale.z + 0.3\r\n            )\r\n          })\r\n        }\r\n\r\n        camera.updateProjectionMatrix()\r\n\r\n        console.log(camera.zoom)\r\n      }\r\n    }\r\n\r\n    window.addEventListener(\"mousedown\", () => {\r\n      if (selectBtnObjs) {\r\n        selectBtnObjs.map((selectBtnObj) => {\r\n          selectBtnObj.rotation.set(camera.rotation.x, camera.rotation.y, camera.rotation.z)\r\n        })\r\n      }\r\n    })\r\n\r\n    window.addEventListener(\"mouseup\", () => {\r\n      if (selectBtnObjs) {\r\n        selectBtnObjs.map((selectBtnObj) => {\r\n          selectBtnObj.rotation.set(camera.rotation.x, camera.rotation.y, camera.rotation.z)\r\n        })\r\n      }\r\n    })\r\n\r\n    window.addEventListener(\"mousemove\", onMouseMove)\r\n\r\n    if (ThreeContainer.current !== null) {\r\n      ThreeContainer.current?.appendChild(renderer.domElement)\r\n      // renderer.setAnimationLoop( animate ); <- GPU 메모리 100% 버그 유발\r\n      animate()\r\n    }\r\n\r\n    setInterval(() => {\r\n      console.log(`${frameCount} fps`)\r\n      frameCount = 0\r\n    }, 1000)\r\n\r\n    function animate() {\r\n      frameCount += 1\r\n\r\n      cssRenderer.render(cssScene, camera)\r\n      composer.render(0.1)\r\n      // floorCamera.update(renderer, scene) <- GPU 점유율 대폭 상승 유발\r\n\r\n      requestAnimationFrame(animate)\r\n    }\r\n    console.log(\"dsafas\")\r\n    window.addEventListener(\"resize\", resize)\r\n\r\n    return () => {\r\n      scene.remove.apply(scene, scene.children)\r\n    }\r\n  }, [])\r\n  return <Container id=\"container\" ref={ThreeContainer}></Container>\r\n}\r\n\r\nexport default ThreeScene\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\DirectionalLight.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Floor.ts",["116","117"],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\LogoBox.ts",["118"],"import * as THREE from \"three\"\r\nimport { FlatShading } from \"three\"\r\nimport { scene } from \"../ThreeScene\"\r\n\r\nexport const addLogoBox = (position: { x: number; y: number; z: number }, image: string) => {\r\n  const logoBoxGeo = new THREE.BoxBufferGeometry(300, 300, 100)\r\n  const logoBoxTexture = new THREE.TextureLoader().load(image)\r\n  const logoBoxMat = new THREE.MeshPhongMaterial({\r\n    specular: \"orange\",\r\n    flatShading: true,\r\n    map: logoBoxTexture,\r\n  })\r\n  const logoBox = new THREE.Mesh(logoBoxGeo, logoBoxMat)\r\n  logoBox.position.set(position.x, position.y, position.z)\r\n  scene.add(logoBox)\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Window.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\FontLoader.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SunLight.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SpotLight.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\RoofWIndowHole.ts",[],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\GLTFModelLoader.ts",["119"],"C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\JFlixObjects.ts",["120"],"import { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\r\nimport { scene } from \"../ThreeScene\"\r\nimport { FontLoder } from \"./FontLoader\"\r\nimport { addLogoBox } from \"./LogoBox\"\r\n\r\nimport reactLogo from \"../../resources/images/reactLogo.jpg\"\r\nimport styledComponentsLogo from \"../../resources/images/styledComponents.jpg\"\r\nimport netlifyLogo from \"../../resources/images/netlify.jpg\"\r\nimport jsLogo from \"../../resources/images/vanillajs.png\"\r\nimport sunsetImg1 from \"../resources/images/Sunset Backgrounds/sunset12.jpg\"\r\n\r\nexport const JFlixObjects = () => {\r\n  // 책 모형에 붙일 텍스트 geometry\r\n  FontLoder(\r\n    {\r\n      fontModelUrl: \"/fonts/helvetiker_regular.typeface.json\",\r\n      text: \"J-Flix\",\r\n      size: 80,\r\n      height: 50,\r\n      color: 0x02f6d5,\r\n      bevelSize: 7,\r\n    },\r\n    { x: 100, y: 200, z: -900 }\r\n  )\r\n  // 프로젝트 제목\r\n\r\n  // 제작자 이름\r\n  FontLoder(\r\n    {\r\n      fontModelUrl: \"/fonts/helvetiker_regular.typeface.json\",\r\n      text: \"Made By.Jiwon\",\r\n      size: 35,\r\n      height: 50,\r\n      color: 0xffffff,\r\n      bevelSize: 3,\r\n    },\r\n    { x: 100, y: 100, z: -900 }\r\n  )\r\n\r\n  FontLoder(\r\n    {\r\n      fontModelUrl: \"/fonts/D2D.json\",\r\n      text:\r\n        \"HTML,CSS,순수_JavaScript로_만든\\n\\n미니_프로젝트들과_\\n\\n_리액트를_사용하여_만든_\\n\\nnomflix_클론입니다\",\r\n      size: 20,\r\n      height: 10,\r\n      color: 0xffffff,\r\n      bevelSize: 1,\r\n    },\r\n    { x: -200, y: 0, z: -900 }\r\n  )\r\n\r\n  // 기술스택 박스 만들기\r\n\r\n  addLogoBox({ x: -500, y: 200, z: -940 }, reactLogo)\r\n  addLogoBox({ x: -500, y: -200, z: -940 }, styledComponentsLogo)\r\n  addLogoBox({ x: 700, y: 100, z: -940 }, netlifyLogo)\r\n  addLogoBox({ x: 700, y: -300, z: -940 }, jsLogo)\r\n\r\n  const loader = new GLTFLoader()\r\n\r\n  // 소파 모델 로드\r\n\r\n  loader.load(\"/models/sofa/scene.gltf\", (gltf) => {\r\n    gltf.scene.scale.set(220, 220, 220)\r\n    gltf.scene.position.set(0, -500, 100)\r\n\r\n    gltf.scene.rotateY(Math.PI)\r\n\r\n    scene.add(gltf.scene)\r\n  })\r\n\r\n  // 팝콘 모델 로드\r\n\r\n  loader.load(\"/models/popcorn_bucket/scene.gltf\", (gltf) => {\r\n    gltf.scene.scale.set(100, 100, 100)\r\n    gltf.scene.position.set(-1000, -500, 850)\r\n\r\n    gltf.scene.rotateY(Math.PI)\r\n    scene.add(gltf.scene)\r\n  })\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\BackgroundBox.ts",["121","122"],"import groundImg from \"../../resources/images/ground.jpg\"\r\nimport { scene } from \"../ThreeScene\"\r\nimport * as THREE from \"three\"\r\n\r\n// 노을 배경 박스 생성\r\n\r\nexport const addBackgroundBox = () => {\r\n  const materialArray = []\r\n  const texture_ft = new THREE.TextureLoader().load(\r\n    \"https://media-exp1.licdn.com/dms/image/C511BAQE0NnIkjkotGA/company-background_10000/0/1541489744017?e=2159024400&v=beta&t=8CzJngJh5TrtF6_WFRYSlDeycAkT52hAfb4qLYGYnv8\"\r\n  )\r\n  const texture_bk = new THREE.TextureLoader().load(\r\n    \"https://media-exp1.licdn.com/dms/image/C511BAQE0NnIkjkotGA/company-background_10000/0/1541489744017?e=2159024400&v=beta&t=8CzJngJh5TrtF6_WFRYSlDeycAkT52hAfb4qLYGYnv8\"\r\n  )\r\n  const texture_up = new THREE.TextureLoader().load(\r\n    \"https://media-exp1.licdn.com/dms/image/C511BAQE0NnIkjkotGA/company-background_10000/0/1541489744017?e=2159024400&v=beta&t=8CzJngJh5TrtF6_WFRYSlDeycAkT52hAfb4qLYGYnv8\"\r\n  )\r\n  const texture_dn = new THREE.TextureLoader().load(groundImg)\r\n\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }))\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }))\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }))\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_dn })) // 땅 텍스쳐\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }))\r\n  materialArray.push(new THREE.MeshBasicMaterial({ map: texture_ft }))\r\n\r\n  const skyboxGeo = new THREE.BoxGeometry(19000, 19000, 19000)\r\n  const skybox = new THREE.Mesh(skyboxGeo, materialArray)\r\n  skybox.position.set(0, 8990, 0)\r\n  materialArray.map((mat) => {\r\n    mat.side = THREE.BackSide\r\n    return null\r\n  })\r\n  scene.add(skybox)\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\Frame.ts",["123"],"import * as THREE from \"three\"\r\nimport { GLTFLoader } from \"three/examples/jsm/loaders/GLTFLoader\"\r\nimport { camera, scene } from \"../ThreeScene\"\r\nimport nomadLogo from \"../../resources/images/nomadLogo.png\"\r\n\r\n// 액자 모델\r\nconst loader = new GLTFLoader()\r\n\r\nexport let frameGroupMesh: THREE.Object3D\r\nexport const addFrame = () => {\r\n  loader.load(\"/models/3d_architecture__photo_frame/scene.gltf\", (gltf) => {\r\n    frameGroupMesh = gltf.scene\r\n    frameGroupMesh.scale.set(10, 10, 10)\r\n    frameGroupMesh.position.set(1480, 0, 0)\r\n    frameGroupMesh.rotateY(Math.PI)\r\n\r\n    scene.add(frameGroupMesh)\r\n\r\n    // 카메라 시점이 액자 뒤로 갔을 때 사라지게 하는 알고리즘\r\n    window.addEventListener(\"mouseup\", () => {\r\n      console.log(camera.position)\r\n      console.log(camera.rotation)\r\n      const meshsOfFrame =\r\n        frameGroupMesh.children[0].children[0].children[0].children[0].children[0].children[0]\r\n          .children\r\n\r\n      meshsOfFrame.map((object) => {\r\n        if (camera.rotation.z > 0.2) {\r\n          object.visible = false\r\n        } else {\r\n          object.visible = true\r\n        }\r\n      })\r\n    })\r\n\r\n    // 액자에 들어갈 그림\r\n\r\n    const sizeCheckBox = new THREE.Box3().setFromObject(gltf.scene) // 액자 크기 측정을 위한 가상 박스\r\n    console.log(sizeCheckBox)\r\n    const frameWidth = sizeCheckBox.max.z - sizeCheckBox.min.z - 100\r\n    const frameHeight = sizeCheckBox.max.y - sizeCheckBox.min.y - 100\r\n    const frameDepth = sizeCheckBox.max.x - sizeCheckBox.min.x\r\n\r\n    const imageInFrameGeo = new THREE.PlaneBufferGeometry(frameWidth, frameHeight, frameDepth)\r\n    const imageInFrameTexture = new THREE.TextureLoader().load(nomadLogo)\r\n    const imageInFrameMat = new THREE.MeshPhongMaterial({ map: imageInFrameTexture })\r\n    const imageInFrame = new THREE.Mesh(imageInFrameGeo, imageInFrameMat)\r\n    imageInFrame.rotateY(-Math.PI / 2)\r\n    imageInFrame.position.set(1460, 0, 0)\r\n\r\n    scene.add(imageInFrame)\r\n  })\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\SelectBtn.ts",["124","125","126","127","128","129","130"],"import * as THREE from \"three\"\r\nimport { FlatShading } from \"three\"\r\nimport {\r\n  camera,\r\n  scene,\r\n  selectBtnObjs,\r\n  cssScene,\r\n  embedWebsite,\r\n  controls,\r\n  websiteObject,\r\n} from \"../ThreeScene\"\r\nimport CSS3D from \"three-css3drenderer\"\r\nimport { frameGroupMesh } from \"./Frame\"\r\n\r\n// 선택 버튼 생성\r\nexport const addSelectBtn = (contents: {\r\n  text: string\r\n  btnPosition: { x: number; y: number; z: number }\r\n  cameraPosition: { x: number; y: number; z: number }\r\n  zoomIndex: number\r\n}) => {\r\n  function chooseProject() {\r\n    // 순차적으로 프로젝트 변경\r\n    // 나중에 버튼을 여러개 만들어 각각 선택할 수 있게 할까 고민중.\r\n    if (embedWebsite.src === \"https://nomfilx-jiwon.netlify.app/#/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Music-Player/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Music-Player/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Typing-Game/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Typing-Game/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Hangman-Game/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Hangman-Game/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Expense-Tracker/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Expense-Tracker/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Speech-Text-Reader/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Speech-Text-Reader/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Sortable-List/\"\r\n    } else if (embedWebsite.src === \"https://gonnabea.github.io/Sortable-List/\") {\r\n      embedWebsite.src = \"https://gonnabea.github.io/Breakout-Game/\"\r\n    } else {\r\n      embedWebsite.src = \"https://nomfilx-jiwon.netlify.app/#/\"\r\n    }\r\n  }\r\n\r\n  const selectBtn = document.createElement(\"button\")\r\n  selectBtn.innerHTML = contents.text\r\n  selectBtn.style.width = \"100px\"\r\n  selectBtn.style.height = \"100px\"\r\n  selectBtn.style.fontSize = \"60px\"\r\n  selectBtn.style.borderRadius = \"100%\"\r\n  selectBtn.style.background = \"rgba(0,0,0,0.5)\"\r\n  selectBtn.style.color = \"white\"\r\n\r\n  selectBtn.onmouseover = () => {\r\n    selectBtn.style.color = \"skyblue\"\r\n    selectBtn.style.border = \"10px solid skyblue\"\r\n    selectBtn.style.cursor = \"pointer\"\r\n  }\r\n  selectBtn.onmouseleave = () => {\r\n    selectBtn.style.border = \"none\"\r\n\r\n    selectBtn.style.color = \"white\"\r\n  }\r\n\r\n  const selectBtnObj = new CSS3D.CSS3DObject(selectBtn)\r\n\r\n  selectBtnObjs.push(selectBtnObj)\r\n\r\n  selectBtnObj.position.set(contents.btnPosition.x, contents.btnPosition.y, contents.btnPosition.z)\r\n  selectBtnObj.rotation.set(camera.rotation.x, camera.rotation.y, camera.rotation.z)\r\n  cssScene.add(selectBtnObj)\r\n\r\n  selectBtn.onclick = () => {\r\n    // (TV 버튼을 클릭했을 경우)\r\n    const meshsOfFrame =\r\n      frameGroupMesh?.children[0].children[0].children[0].children[0].children[0].children[0]\r\n        .children\r\n    if (contents.text === \"1\") {\r\n      console.log(frameGroupMesh)\r\n\r\n      meshsOfFrame.map((object: { visible: boolean }) => {\r\n        object.visible = false\r\n      })\r\n    } // 프로젝트 변경 버튼을 클릭했을 경우\r\n    else if (contents.text === \"✨\") {\r\n      chooseProject()\r\n\r\n      meshsOfFrame.map((object: { visible: boolean }) => {\r\n        object.visible = false\r\n      })\r\n    } else {\r\n      meshsOfFrame.map((object: { visible: boolean }) => {\r\n        object.visible = true\r\n      })\r\n    }\r\n\r\n    camera.rotation.set(\r\n      websiteObject.rotation.x,\r\n      websiteObject.rotation.y,\r\n      websiteObject.rotation.z\r\n    )\r\n    camera.position.set(\r\n      contents.cameraPosition.x,\r\n      contents.cameraPosition.y,\r\n      contents.cameraPosition.z\r\n    )\r\n\r\n    camera.zoom = contents.zoomIndex\r\n\r\n    camera.updateProjectionMatrix()\r\n    camera.updateMatrix()\r\n    cssScene.updateMatrixWorld()\r\n\r\n    // 카메라 자동 이동 시 iframe이 비활성화되는 현상 해결책\r\n    controls.rotateUp(-0.01)\r\n    controls.update()\r\n\r\n    selectBtnObjs.map((selectBtnObj) => {\r\n      selectBtnObj.scale.set(1, 1, 1)\r\n      selectBtnObj.rotation.set(camera.rotation.x, camera.rotation.y, camera.rotation.z)\r\n      camera.updateProjectionMatrix()\r\n      camera.updateMatrix()\r\n      cssScene.updateMatrixWorld()\r\n    })\r\n  }\r\n}\r\n","C:\\Users\\최지원\\Desktop\\프로그래밍\\j-room\\src\\Components\\ThreeModules\\CeilConnetor.ts",["131"],"import { scene } from \"../ThreeScene\"\r\nimport * as THREE from \"three\"\r\nimport { BackSide, FrontSide } from \"three\"\r\n\r\n// 천장과 벽지 이음새\r\nexport const addCeilConnector = (\r\n  scale: { x: number; y: number; z: number },\r\n  depth: number,\r\n  position: { x: number; y: number; z: number },\r\n  color: string,\r\n  rotation: { x: number; y: number; z: number }\r\n) => {\r\n  const shape = new THREE.Shape()\r\n  shape.moveTo(0, 0)\r\n  shape.lineTo(10, 0)\r\n  shape.lineTo(10, 10)\r\n\r\n  const setting = {\r\n    steps: 2,\r\n    depth,\r\n    bevelEnabled: true,\r\n    bevelThickness: 1,\r\n    bevelSize: 10,\r\n    bevelOffset: 0,\r\n    bevelSegments: 1,\r\n  }\r\n\r\n  const geometry = new THREE.ExtrudeGeometry(shape, setting)\r\n  const material = new THREE.MeshBasicMaterial({ color })\r\n  const mesh = new THREE.Mesh(geometry, material)\r\n  mesh.scale.set(scale.x, scale.y, scale.z)\r\n  mesh.rotation.set(rotation.x, rotation.y, rotation.z)\r\n  mesh.position.set(position.x, position.y, position.z)\r\n  material.side = FrontSide\r\n  scene.add(mesh)\r\n}\r\n",{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","replacedBy":"135"},{"ruleId":"136","severity":1,"message":"137","line":5,"column":7,"nodeType":"138","messageId":"139","endLine":5,"endColumn":16},{"ruleId":"136","severity":1,"message":"140","line":77,"column":11,"nodeType":"138","messageId":"139","endLine":77,"endColumn":26},{"ruleId":"136","severity":1,"message":"141","line":102,"column":11,"nodeType":"138","messageId":"139","endLine":102,"endColumn":23},{"ruleId":"142","severity":1,"message":"143","line":508,"column":44,"nodeType":"144","messageId":"145","endLine":508,"endColumn":46},{"ruleId":"142","severity":1,"message":"143","line":528,"column":44,"nodeType":"144","messageId":"145","endLine":528,"endColumn":46},{"ruleId":"142","severity":1,"message":"143","line":545,"column":42,"nodeType":"144","messageId":"145","endLine":545,"endColumn":44},{"ruleId":"142","severity":1,"message":"143","line":553,"column":42,"nodeType":"144","messageId":"145","endLine":553,"endColumn":44},{"ruleId":"136","severity":1,"message":"146","line":3,"column":8,"nodeType":"138","messageId":"139","endLine":3,"endColumn":19},{"ruleId":"136","severity":1,"message":"147","line":39,"column":9,"nodeType":"138","messageId":"139","endLine":39,"endColumn":23},{"ruleId":"136","severity":1,"message":"148","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":21},{"ruleId":"136","severity":1,"message":"149","line":1,"column":13,"nodeType":"138","messageId":"139","endLine":1,"endColumn":18},{"ruleId":"136","severity":1,"message":"150","line":10,"column":8,"nodeType":"138","messageId":"139","endLine":10,"endColumn":18},{"ruleId":"136","severity":1,"message":"151","line":12,"column":9,"nodeType":"138","messageId":"139","endLine":12,"endColumn":19},{"ruleId":"136","severity":1,"message":"152","line":15,"column":9,"nodeType":"138","messageId":"139","endLine":15,"endColumn":19},{"ruleId":"142","severity":1,"message":"143","line":27,"column":33,"nodeType":"144","messageId":"145","endLine":27,"endColumn":35},{"ruleId":"136","severity":1,"message":"149","line":1,"column":13,"nodeType":"138","messageId":"139","endLine":1,"endColumn":18},{"ruleId":"136","severity":1,"message":"148","line":2,"column":10,"nodeType":"138","messageId":"139","endLine":2,"endColumn":21},{"ruleId":"136","severity":1,"message":"153","line":5,"column":3,"nodeType":"138","messageId":"139","endLine":5,"endColumn":8},{"ruleId":"142","severity":1,"message":"143","line":80,"column":55,"nodeType":"144","messageId":"145","endLine":80,"endColumn":57},{"ruleId":"142","severity":1,"message":"143","line":87,"column":55,"nodeType":"144","messageId":"145","endLine":87,"endColumn":57},{"ruleId":"142","severity":1,"message":"143","line":91,"column":55,"nodeType":"144","messageId":"145","endLine":91,"endColumn":57},{"ruleId":"142","severity":1,"message":"143","line":117,"column":38,"nodeType":"144","messageId":"145","endLine":117,"endColumn":40},{"ruleId":"136","severity":1,"message":"154","line":3,"column":10,"nodeType":"138","messageId":"139","endLine":3,"endColumn":18},"no-native-reassign",["155"],"no-negated-in-lhs",["156"],"@typescript-eslint/no-unused-vars","'Container' is assigned a value but never used.","Identifier","unusedVar","'buildingTexture' is assigned a value but never used.","'project1Mesh' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'floorImage2' is defined but never used.","'sphereMaterial' is assigned a value but never used.","'FlatShading' is defined but never used.","'THREE' is defined but never used.","'sunsetImg1' is defined but never used.","'texture_bk' is assigned a value but never used.","'texture_up' is assigned a value but never used.","'scene' is defined but never used.","'BackSide' is defined but never used.","no-global-assign","no-unsafe-negation"]